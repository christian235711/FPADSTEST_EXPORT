create or replace PACKAGE Body FPAQADS_FR
IS
        /******************************************************************************
        *******************************************************************************/
        

FUNCTION EXPORT_JSON_LIFECYCLE (NOMLOG varchar2,P_DATE_TRAI date, P_CODE_PAYS VARCHAR2, P_PATH VARCHAR2, P_FILENAME VARCHAR2)  -- 
return number
IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER := 0;
    V_NB_ENREG_TRAITE NUMBER := 0;
    
    V_NB_MAINTENANCES  NUMBER := 0;
    V_NB_MAINTENANCES_TRAITE NUMBER := 0;



 CURSOR CUR_LIFECYCLE IS
select
AS_ID as tech_id,
sysdate as tech_dateExtraction,
LAST_UPDATE_DATE as tech_dateInsertion,
LFC_COUNTRYBRANCHCODE as countryBranchCode,
LFC_SERIALNUMBER as serialNumber,
LFC_ISLEASCO as isLeasco,
null as isFinco,
LFC_MAINTENANCE_REF as maintenanceRef,
LFC_REPAIR_ID_CODE as repairIdCode,
LFC_REGISTERED_KM as registeredKM,
LFC_CREATION_DATE_FILE as fileCreationDate,
LFC_CHARGE_DATE as vehInChargeDate,
BACKOFFICE_CURRENT_EXT_REF as contractRef
from FPADS.FPAQT_QTASSET_LIFECYCLE LIFECYCLE
where  LIFECYCLE.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS;



/*
CURSOR CUR_VEHICLE IS
select
AS_ID as tech_id,
sysdate as tech_dateExtraction,
LAST_UPDATE_DATE as tech_dateInsertion,
LFC_COUNTRYBRANCHCODE as countryBranchCode,   -----key
LFC_SERIALNUMBER as serialNumber,
LFC_ISLEASCO as isLeasco,
null as isFinco,
LFC_MAINTENANCE_REF as maintenanceRef,  --------key
BACKOFFICE_CURRENT_EXT_REF as contractRef  ---------key
from FPADS.FPAQT_QTASSET_LIFECYCLE LIFECYCLE
where  LIFECYCLE.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS;

CURSOR CU_MAINTENANCES (P_countryBranchCode VARCHAR2) IS
select
LFC_COUNTRYBRANCHCODE as countryBranchCode, -------- key
LFC_MAINTENANCE_REF as maintenanceRef,  --------key
LFC_REPAIR_ID_CODE as repairIdCode,
LFC_REGISTERED_KM as registeredKM,
LFC_CREATION_DATE_FILE as fileCreationDate,
LFC_CHARGE_DATE as vehInChargeDate,
BACKOFFICE_CURRENT_EXT_REF as contractRef  ---------key
from FPADS.FPAQT_QTASSET_LIFECYCLE LIFECYCLE
where  LIFECYCLE.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS 
and LIFECYCLE.LFC_COUNTRYBRANCHCODE =  P_countryBranchCode;   --countryBranchCode

CURSOR CU_CONTRACTREF (P_countryBranchCode VARCHAR2, P_maintenanceRef VARCHAR2) IS
select
LFC_COUNTRYBRANCHCODE as countryBranchCode, -------- key
LFC_MAINTENANCE_REF as maintenanceRef,  --------key
BACKOFFICE_CURRENT_EXT_REF as contractRef  ---------key
from FPADS.FPAQT_QTASSET_LIFECYCLE LIFECYCLE
where  LIFECYCLE.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS 
and LIFECYCLE.LFC_COUNTRYBRANCHCODE =  P_countryBranchCode   --countryBranchCode
and LIFECYCLE.LFC_MAINTENANCE_REF = P_maintenanceRef ;  


*/

BEGIN
  file_name := p_filename;
  FILE_ID := FPA.FPAQAUT.F_OPEN(NOMLOG);
  RES := FPA.FPAQAUT.F_WRITE(FILE_ID, 'EXPORT_JSON_LIFECYCLE', ' ## EXPORT COLLECTION EXPORT_JSON_LIFECYCLE JSON ' ||  ' ##');
  file_id_cvs:= FPA.FPAQAUT.F_OPEN_CVS_UTF8(p_path,file_name);

  BEGIN
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   FPADS.FPAQT_QTASSET_LIFECYCLE LIFECYCLE 
       WHERE  LIFECYCLE.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS;

  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;


      V_LIGNE := '{'; ---- avant [ mais dans format exemple {
      res := FPA.FPAQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      FOR REC_CUR_LIFECYCLE IN CUR_LIFECYCLE LOOP
      BEGIN
              V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE+1;
              V_LIGNE := '"vehicle": {  
    "tech_id": "' || REC_CUR_LIFECYCLE.tech_id || '",
    "tech_dateExtraction": "' || REC_CUR_LIFECYCLE.tech_dateExtraction || '",
    "tech_dateInsertion": "' || REC_CUR_LIFECYCLE.tech_dateInsertion || '",
    "countryBranchCode": "' || REC_CUR_LIFECYCLE.countryBranchCode || '",
    "serialNumber": "' || REC_CUR_LIFECYCLE.serialNumber || '",
    "isLeasco": "' || REC_CUR_LIFECYCLE.isLeasco || '",
    "isFinco": "' || REC_CUR_LIFECYCLE.isFinco || '",
    "maintenances": [
        {
            "maintenanceRef": "' || REC_CUR_LIFECYCLE.maintenanceRef || '",
            "repairIdCode": "' || REC_CUR_LIFECYCLE.repairIdCode || '",
            "registeredKM": "' || REC_CUR_LIFECYCLE.registeredKM || '",
            "fileCreationDate": "' || REC_CUR_LIFECYCLE.fileCreationDate || '",
            "vehInChargeDate": "' || REC_CUR_LIFECYCLE.vehInChargeDate || '",
            "contracts": [
                {
                    "contractRef": "' || REC_CUR_LIFECYCLE.contractRef || '"
                }
            ]
        }
    ]';

        
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';
    else V_LIGNE := V_LIGNE || '},';
    end if;

    res := FPA.FPAQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    N_SAUV := N_SAUV +1;
       EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                 RES   := FPA.FPAQAUT.F_WRITE(FILE_ID,'EXPORT_JSON_LIFECYCLE ',
                 'MESSAGE ERREUR PL/SQL : ' ||SQLERRM || ':' || REC_CUR_LIFECYCLE.maintenanceRef || ':' || REC_CUR_LIFECYCLE.maintenanceRef || ':' || REC_CUR_LIFECYCLE.contractRef);
       --RETURN V_ERR;
       RETURN V_ERR;
  END;
  END LOOP;
   V_LIGNE := '}';   ---- avant ] mais dans format exemple }
   res := FPA.FPAQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := FPA.FPAQAUT.F_WRITE(file_id,
                               'EXPORT_JSON_LIFECYCLE',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := FPA.FPAQAUT.F_WRITE(FILE_ID,'EXPORT_JSON_LIFECYCLE ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_JSON_LIFECYCLE;        
        
                
        





FUNCTION EXPORT_JSON_BILLING (NOMLOG varchar2,P_DATE_TRAI date, P_CODE_PAYS VARCHAR2, P_PATH VARCHAR2, P_FILENAME VARCHAR2)  -- 
return number
IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER := 0;
    V_NB_ENREG_TRAITE NUMBER := 0;
    
    V_NB_MAINTENANCES  NUMBER := 0;
    V_NB_MAINTENANCES_TRAITE NUMBER := 0;



 CURSOR CUR_BILLING IS
select
CUS_INVOICE_REF,
CUS_INVOICE_TYPE,
CUS_DUE_DATE,
CUS_SITUATION_DATE,
CUS_START_PERIODE,
CUS_END_PERIODE,
CUS_AMOUNT_IT,
IS_LEASECO,
CUS_PAYMENT_TYPE_CODE,
CUS_PAYMENT_TYPE,
CUS_ACCOUNT_HOLDER_NAME,
CUS_ACCOUNT_HOLDER_REF,
CUS_ITEM_LABEL,
CUS_ITEM_AMOUNT_ET,
CUS_ITEM_AMOUNT_IT,
CUS_ITEM_AMOUNT_IT_THIRD_PARTY,
CUS_ITEM_VAT_AMOUNT,
CUS_ITEM_VAT_AMOUNT_THIRD_PARTY,
BACKOFFICE_CURRENT_EXT_REF,
CUS_NATIONAL_IDENTIFIER,
CUS_NATIONAL_IDENTIFIER_TYPE,
CUS_ID,
LAST_UPDATE_DATE
from FPADS.FPAQT_QTCUSTOMER_BILLING BILLING ;
-------where  LIFECYCLE.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS;




BEGIN
  file_name := p_filename;
  FILE_ID := FPA.FPAQAUT.F_OPEN(NOMLOG);
  RES := FPA.FPAQAUT.F_WRITE(FILE_ID, 'EXPORT_JSON_BILLING', ' ## EXPORT COLLECTION EXPORT_JSON_BILLING JSON ' ||  ' ##');
  file_id_cvs:= FPA.FPAQAUT.F_OPEN_CVS_UTF8(p_path,file_name);

  BEGIN
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   FPADS.FPAQT_QTCUSTOMER_BILLING BILLING ;
     -------  WHERE  BILLING.LFC_COUNTRYBRANCHCODE = P_CODE_PAYS;

  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;


      V_LIGNE := '{'; ---- avant [ mais dans format exemple {
      res := FPA.FPAQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      FOR REC_CUR_BILLING IN CUR_BILLING LOOP
      BEGIN
              V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE+1;
              V_LIGNE := '"invoice": {  
    "tech_id": "' || REC_CUR_BILLING.tech_id || '",
    "tech_dateExtraction": "' || REC_CUR_BILLING.tech_dateExtraction || '",
    "countryBranchCode": "' || REC_CUR_BILLING.countryBranchCode || '",
    "invoiceRef": "' || REC_CUR_BILLING.invoiceRef || '",
    "type ": "' || REC_CUR_BILLING.type  || '",
    "scopeCode": "' || REC_CUR_BILLING.scopeCode || '",
    "statut": "' || REC_CUR_BILLING.statut || '",
    "dueDate": "' || REC_CUR_BILLING.dueDate || '",
    "startDueDate": "' || REC_CUR_BILLING.startDueDate || '",
    "endDueDate": "' || REC_CUR_BILLING.endDueDate || '",
    "situationDate": "' || REC_CUR_BILLING.situationDate || '",
    "amountET": "' || REC_CUR_BILLING.amountET || '",
    "amountIT": "' || REC_CUR_BILLING.amountIT || '",
    "interestAmount": "' || REC_CUR_BILLING.interestAmount || '",
    "vatAmount": "' || REC_CUR_BILLING.vatAmount || '",
    "residualValueFlag": "' || REC_CUR_BILLING.residualValueFlag || '",
    "redoInvoiceRef": "' || REC_CUR_BILLING.redoInvoiceRef || '",
    "isLeaseco": "' || REC_CUR_BILLING.isLeaseco || '",
    "isFinco": "' || REC_CUR_BILLING.isFinco || '",
    "payMeans": [
        {
            "paymentTypeCode": "' || REC_CUR_BILLING.paymentTypeCode || '",
            "paymentType": "' || REC_CUR_BILLING.paymentType || '",
            "accountHolderName": "' || REC_CUR_BILLING.accountHolderName || '",
            "accountHolderRef": "' || REC_CUR_BILLING.accountHolderRef || '",
            "items": [
                {
                    "itemNumber": "' || REC_CUR_BILLING.itemNumber || '",
                    "itemLabel": "' || REC_CUR_BILLING.itemLabel || '",
                    "startOfPeriod": "' || REC_CUR_BILLING.startOfPeriod || '",
                    "endOfPeriod": "' || REC_CUR_BILLING.endOfPeriod || '",
                    "amountET": "' || REC_CUR_BILLING.amountET || '",
                    "amountIT": "' || REC_CUR_BILLING.amountIT || '",
                    "amountITThirdParty": "' || REC_CUR_BILLING.amountITThirdParty || '",
                    "vatAmount": "' || REC_CUR_BILLING.vatAmount || '",
                    "vatAmountThirdParty": "' || REC_CUR_BILLING.vatAmountThirdParty || '",
                    "interestAmount": "' || REC_CUR_BILLING.interestAmount || '",
                    "amountAdjustedFlag": "' || REC_CUR_BILLING.amountAdjustedFlag || '",
                    "vatAmountAdjustedFlag": "' || REC_CUR_BILLING.vatAmountAdjustedFlag || '",
                    "details": [
                        {
                        "detailType": "' || REC_CUR_BILLING.detailType || '",
                        "detailValue": "' || REC_CUR_BILLING.detailValue || '"
                        }
                    ],
                    "contract": {
                        "contractRef": "' || REC_CUR_BILLING.contractRef || '",
                        "productCode": "' || REC_CUR_BILLING.productCode || '"
                    }
                }
            ],
            "itemsAggregated": [
                {
                    "itemNumber": "' || REC_CUR_BILLING.itemNumber || '",
                    "itemLabel": "' || REC_CUR_BILLING.itemLabel || '",
                    "startOfPeriod": "' || REC_CUR_BILLING.startOfPeriod || '",
                    "endOfPeriod": "' || REC_CUR_BILLING.endOfPeriod || '",
                    "amountET": "' || REC_CUR_BILLING.amountET || '",
                    "amountIT": "' || REC_CUR_BILLING.amountIT || '",
                    "amountITThirdParty": "' || REC_CUR_BILLING.amountITThirdParty || '",
                    "vatAmount": "' || REC_CUR_BILLING.vatAmount || '",
                    "vatAmountThirdParty": "' || REC_CUR_BILLING.vatAmountThirdParty || '",
                    "interestAmount": "' || REC_CUR_BILLING.interestAmount || '",
                    "amountAdjustedFlag": "' || REC_CUR_BILLING.amountAdjustedFlag || '",
                    "vatAmountAdjustedFlag": "' || REC_CUR_BILLING.vatAmountAdjustedFlag || '",
                    "details": [
                    {
                        "detailType": "' || REC_CUR_BILLING.detailType || '",
                        "detailValue": "' || REC_CUR_BILLING.detailValue || '"
                    }
                    ],
                    "contract": [
                        {
                        "contractRef": "' || REC_CUR_BILLING.contractRef || '",
                        "productCode": "' || REC_CUR_BILLING.productCode || '"
                        }
                    ]
                }
            ],
            "customer": {
                "nationalIdentifiers": {
                    "nationalIdentifier": "' || REC_CUR_BILLING.nationalIdentifier || '",
                    "nationalIdentifierTypeCode": "' || REC_CUR_BILLING.nationalIdentifierTypeCode || '"
                }
            }
        }';
    

        
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';
    else V_LIGNE := V_LIGNE || '},';
    end if;

    res := FPA.FPAQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    N_SAUV := N_SAUV +1;
       EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                 RES   := FPA.FPAQAUT.F_WRITE(FILE_ID,'EXPORT_JSON_BILLING ',
                 'MESSAGE ERREUR PL/SQL : ' ||SQLERRM || ':' || REC_CUR_LIFECYCLE.maintenanceRef || ':' || REC_CUR_LIFECYCLE.maintenanceRef || ':' || REC_CUR_LIFECYCLE.contractRef);
       --RETURN V_ERR;
       RETURN V_ERR;
  END;
  END LOOP;
   V_LIGNE := '}';   ---- avant ] mais dans format exemple }
   res := FPA.FPAQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := FPA.FPAQAUT.F_WRITE(file_id,
                               'EXPORT_JSON_BILLING',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := FPA.FPAQAUT.F_WRITE(FILE_ID,'EXPORT_JSON_BILLING ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_JSON_BILLING;                
        
        
        
        
        
        
        
        
        
        
        
        
        
FUNCTION ALIM_CTR_EKIP (NOMLOG       VARCHAR2,
                        P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        V_MT_HT_PRESTATION NUMBER(18,3) :=0;
        V_CONTRACT_ID NUMBER(20);
                
        CURSOR CUR IS
                SELECT
                        NULL                                                    AS PARENT_ID                     ,
                        CTC.REF_NO                                              AS BACKOFFICE_CURRENT_EXT_REF    ,
                        BACK_OFF.ID                                             AS BACKOFFICE_ID                 ,
                        PROD_TYP.ID                                             AS PRODUCT_TYPE_ID               ,
                        PROD_SUBTYP.ID                                          AS PRODUCT_SUBTYPE_ID            ,
                        C.ID                                                    AS CONTRACT_STATE_ID             ,
                        CTC.STATUT_AFF_CD                                       AS ORIGIN_STATUS                 ,
                        CTC.POS_GES_DAT                                         AS STATE_CHANGE_DATE             ,
                        NETWORK.ID                                              AS NETWORK_ID                    ,
                        CTC.CTX_AFF_IND                                         AS ACCOUNTING_STATUS             ,
                        ELT.DEV_CD                                              AS CURRENCY                      ,
                        'FR'                                                    AS COUNTRY_CODE                  ,
                        CTC.ACC_OFFRE_DAT                                       AS SIGNATURE_DATE                ,
                        TDE.DE_DE_FLGSIGNELEC                                   AS ELECTRONIC_SIGNATURE          ,
                        CTC.ENTREE_CA_DAT                                       AS ACTIVATION_DATE               ,
                        CTC.LOC_INIT_EC_DUR                                     AS INITIAL_DURATION              ,
                        CTC.CR_TOT_DUR                                          AS DURATION                      ,
                        ADD_MONTHS(CTC.FIN_CONT_DAT, 1)                         AS CLOSING_DATE                  ,
                        CTC.CATEG_AFF_CD                                        AS CATEGORY                      ,
                        CTC.AGENCE_CD                                           AS AGENCY                        ,
                        ADD_MONTHS(CTC.FIN_CONT_DAT, 120)                       AS PURGE_DATE                    ,
                        NULL                                                    AS BALLOON_AMOUNT                ,
                        ELT.FIN_MT                                              AS AMOUNT                        ,
                        ELT.FIN_DAT                                             AS START_DATE                    ,
                        ELT.MT_HT_PART_APPORT + ELT.MT_HT_PART_CONST            AS CONTRIBUTION                  ,
                        NULL                                                    AS RECOVERY_LEVEL_ID             ,
                        CTC.IMP_COURS_NB                                        AS NB_CURRENT_UNPAID             ,
                        CTC.CRD_MT                                              AS REMAINING_CAPITAL             ,
                        NULL                                                    AS SECURITIZED                   ,
                        CTC.ORIG_FIN_DAT                                        AS FIRST_DUE_DATE                ,
                        ELT.CONT_TX                                             AS NOMINAL_RATE                  ,
                        INI.FIN_MT                                              AS INITIAL_AMOUNT                ,
                        ELT.PX_ACQUI_MT                                         AS FUNDED_ASSET_AMOUNT           ,
                        REPLACE(ELT.QUANT_ECH_VAL, 'FIN', '30')                 AS DAY_OF_MONTH                  ,
                        NULL                                                    AS LAST_DUE_DATE                 ,
                        ELT.SERIE_NO                                            AS VIN                           ,
                        ELT.LIV_VEH_DAT                                         AS DELIVERY_DATE                 ,
                        CTC.KILOMETRAGE                                         AS AGREED_MILEAGE                ,
                        ELT.USAGE_PROF_CD                                       AS PROFESSIONAL_USE              ,
                        ELT.DG_MT                                               AS DEPOSIT_AMOUNT                ,
                        CTC.FIN_CONT_DAT                                        AS EXPECTED_RETURN_DATE          ,
                        ELT.RACHAT_MT_TC                                        AS REPURCHASE_AMOUNT             ,
                        ELT.RACHAT_MT_HT                                        AS REPURCHASE_AMOUNT_HT          ,
                        NULL                                                    AS BACKOFFICE_PARENT_EXTERNAL_REF,
                        P_DATE_TRAIT                                            AS LAST_UPDATE_DATE              ,
                        CTC.CD_SOURCE                                           AS BACKOFFICE_CODE               ,
                        CTC.PRODUIT_CD                                          AS PRODUCT_CODE                  ,
                        CTC.CATEG_AFF_CD                                        AS SUB_PRODUCT_CODE              ,
                        B.transco_salesforce                                    AS STATE_CODE                    ,
                        CTC.RES_APP_CD                                          AS NETWORK_CODE                  ,
                        NULL                                                    AS RECOVER_CODE                  ,
                        CTC_DATE_ECH_M_GPA                                      AS NEXT_DUE_DATE                 ,
                        CTC_MT_CRD_MPLUS2_HT - CTC_MT_CRD_MPLUS1_HT             AS NEXT_RENT_AMOUNT              ,
                        REPLACE(CTC_NB_ECH_PLEINE_REST, CHR(13), '')            AS NB_REMAIN_RENT                ,
                        NULL                                                    AS LAST_DUE_AMOUNT_HT            ,
                        NULL                                                    AS NEXT_RENT_AMOUNT_HT           ,
                        NVL(CTC.LOYER_FIN_HT, 0)                                AS LOYER_FIN_HT                  ,
                        0/*NVL(ELT.MT_HT_FRAIS_DIV, 0)*/  /*+ NVL(MAC.MT_HT_FRE, 0)*/           AS MT_AUTRE_MONTANT_HT           ,
                        0/*NVL(ELT.MT_TTC_FRAIS_DIV, 0)*/ /*+ NVL(MAC.MT_TTC_FRE, 0)*/          AS MT_AUTRE_MONTANT_TTC,
                        b.transco_salesforce                                                                                ,
                        c.id                                                                                                ,
                        ELT.DATE_RESTITUTION                                                    AS RESTITUTION_DATE,
                        CASE WHEN CTC.TIERS_REPRENEUR IN ('630700Q', '55087') THEN 'Y' ELSE 'N' END AS ISBUYBACKMAKE,
                        TDE.DE_DE_NUDEMAND            AS proposalRef,
                        CTC.REF_NO_INTERNE            AS contract_ref_gp,
                        CTC.FLAG_LEASECO             AS IS_LEASECO,
                        NULL                         AS CONTRACTUAL_MILEAGE,
                        2500                         AS FRANCHISE_MILEAGE,
                        0                            AS FRANCHISE_CUSTOMER_MILEAGE,
                        GPA.CTC_EMAIL_CONTACT        AS EMAIL,
                        ELT.VAL_MIN_DUR              AS COEF_VARIATION,
                        ELT.VAL_MAX_DUR              AS COEF_EXTENSION,
                        'UNDER'                      AS TYPE_1,
                        ELT.KM_INF_P2_NB             AS MIN_THRESHOLD_1,
                        ELT.KM_INF_P1_NB-1           AS MAX_THRESHOLD_1,
                        ELT.MT_EXCEDENT_SIM_B1       AS FINANCIAL_KM_COST_1,
                        ELT.ER_CL_INF_P1_MT          AS RESIDUAL_VALUE_KM_COST_1,
                        'UNDER'                      AS TYPE_2,
                        ELT.KM_INF_P1_NB             AS MIN_THRESHOLD_2,
                        CTC.KILOMETRAGE-1            AS MAX_THRESHOLD_2,
                        ELT.MT_EXCEDENT_SIM_B2       AS FINANCIAL_KM_COST_2,
                        ELT.ER_CL_INF_P2_MT          AS RESIDUAL_VALUE_KM_COST_2,
                        'EXCESS'                     AS TYPE_3,
                        CTC.KILOMETRAGE              AS MIN_THRESHOLD_3,
                        ELT.KM_SUP_P1_NB             AS MAX_THRESHOLD_3,
                        ELT.MT_EXCEDENT_SIM_B3       AS FINANCIAL_KM_COST_3,
                        ELT.ER_CL_SUP_P1_MT          AS RESIDUAL_VALUE_KM_COST_3,
                        'EXCESS'                     AS TYPE_4,
                        ELT.KM_SUP_P1_NB+1           AS MIN_THRESHOLD_4,
                        ELT.KM_SUP_P2_NB             AS MAX_THRESHOLD_4,
                        ELT.MT_EXCEDENT_SIM_B4       AS FINANCIAL_KM_COST_4,
                        ELT.ER_CL_SUP_P2_MT          AS RESIDUAL_VALUE_KM_COST_4,
                        'UNDER'                      AS TYPE_5,
                        CTC.TPLUS_REDUC_B2           AS MIN_THRESHOLD_5,
                        CTC.TPLUS_REDUC_B1           AS MAX_THRESHOLD_5,
                        ELT.PRC_PALSIM_B1            AS FINANCIAL_DURATION_COST_5,
                        'UNDER'                      AS TYPE_6,
                        CTC.TPLUS_REDUC_B1           AS MIN_THRESHOLD_6,
                        CTC.CR_TOT_DUR               AS MAX_THRESHOLD_6,
                        ELT.PRC_PALSIM_B2            AS FINANCIAL_DURATION_COST_6,
                        'EXCESS'                     AS TYPE_7,
                        CTC.CR_TOT_DUR+1             AS MIN_THRESHOLD_7,
                        CTC.TPLUS_PROLONG_B1         AS MAX_THRESHOLD_7,
                        ELT.PRC_PALSIM_B3            AS FINANCIAL_DURATION_COST_7,
                        'UNDER'                      AS TYPE_8,
                        CTC.TPLUS_PROLONG_B1+1       AS MIN_THRESHOLD_8,
                        CTC.TPLUS_PROLONG_B2         AS MAX_THRESHOLD_8,
                        ELT.PRC_PALSIM_B4            AS FINANCIAL_DURATION_COST_8
                FROM
                        FPALLD.FPAQTCTC              CTC        ,
                        FPALLD.FPAQTELT              ELT        ,
                        FPALLD.FPAQTELT              INI        ,
                        FPA.FPAQTDE                  TDE        ,
                        FPALLD.FPAQTCTC_GPA          GPA        ,
                      --  FPAF2M.FPAQT_MAC             MAC        ,
                        fpads.fpaqtnom               BACK_OFF   ,
                        FPADS.FPAQTNOM               PROD_TYP   ,
                        FPADS.FPAQTNOM               PROD_SUBTYP,
                        FPADS.FPAQTNOM               NETWORK    ,
                        fpads.fpads_qt_param_t_s_a_d b          ,
                        fpads.fpaqtnom               c
                WHERE
                        CTC.REF_NO                = ELT.REF_NO
                AND     CTC.REF_NO                = INI.REF_NO
                AND     ELT.DER_ELEMENT           = 'O'
                AND     INI.ELEMENT_NO            = 1
                AND     CTC.CD_SOURCE             = 'EKIP'
                AND     TDE.DE_DE_NUMCONT(+)      = CTC.REF_NO
                AND     GPA.CTC_IE_AFFAIRE(+)     = CTC.REF_NO
               -- AND     MAC.NO_CONTRAT(+)         = CTC.REF_NO
               -- AND     MAC.FLAG_FRE(+)           = 'O'
                AND     BACK_OFF.GROUP_TYPE       = 'BACKOFFICE'
                AND     BACK_OFF.CODE             = CTC.CD_SOURCE
                AND     PROD_TYP.GROUP_TYPE       = 'PRODUCT_TYPE'
                AND     PROD_TYP.CODE             = DECODE(CTC.PRODUIT_CD, 'SERV', 'CEM', CTC.PRODUIT_CD)
                AND     PROD_SUBTYP.GROUP_TYPE(+) = 'PRODUCT_SUBTYPE'
                AND     PROD_SUBTYP.CODE(+)       = DECODE(CTC.CATEG_AFF_CD, 'LFIX', 'FIXE', 'LTPL', 'TEMPLU', 'LDLI', 'DISLIB', NULL)
                AND     NETWORK.GROUP_TYPE        = 'CD_NETWORK'
                AND     NETWORK.CODE              = CTC.RES_APP_CD
                AND     CTC.STATUT_AFF_CD         = b.cts_code_statut_back_office(+)
                AND     c.group_type(+)           = 'CONTRACT_STATE'
                AND     c.code(+)                 = b.transco_salesforce
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', '## ALIM_CTR_EKIP ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                
                BEGIN
                     SELECT SUM(DECODE(e.pol_prest_no, 'FAVELISS', 0, nvl(e.prest_mt_ht, 0)))
                            INTO V_MT_HT_PRESTATION
                            FROM FPALLD.FPAQTPRS e
                            WHERE NVL(e.fin_fac_prs_dat_1, e.fin_fac_prs_dat) > P_DATE_TRAIT -- AJOUT CONDITION CAR MT PRESTATION RENSEIGNEE ET PRESTATION RESILIEE
                            and   e.pres_cd_1 NOT IN ('MAJO', 'FPRO')
                            AND   e.ref_no = REC.BACKOFFICE_CURRENT_EXT_REF;
                EXCEPTION WHEN OTHERS THEN
                          V_MT_HT_PRESTATION := 0;
                END;
                
                BEGIN
                        INSERT INTO
                                FPADS_QTCONTRACT
                                (
                                        ID                        ,
                                        PARENT_ID                 ,
                                        BACKOFFICE_CURRENT_EXT_REF,
                                        BACKOFFICE_ID             ,
                                        PRODUCT_TYPE_ID           ,
                                        PRODUCT_SUBTYPE_ID        ,
                                        CONTRACT_STATE_ID         ,
                                        ORIGIN_STATUS             ,
                                        STATE_CHANGE_DATE         ,
                                        NETWORK_ID                ,
                                        ACCOUNTING_STATUS         ,
                                        CURRENCY                  ,
                                        COUNTRY_CODE              ,
                                        SIGNATURE_DATE            ,
                                        ELECTRONIC_SIGNATURE      ,
                                        ACTIVATION_DATE           ,
                                        INITIAL_DURATION          ,
                                        DURATION                  ,
                                        CLOSING_DATE              ,
                                        CATEGORY                  ,
                                        AGENCY                    ,
                                        PURGE_DATE                ,
                                        BALLOON_AMOUNT            ,
                                        NEXT_DUE_DATE             ,
                                        NEXT_RENT_AMOUNT          ,
                                        NB_REMAIN_RENT            ,
                                        LAST_DUE_AMOUNT_HT        ,
                                        NEXT_RENT_AMOUNT_HT       ,
                                        AMOUNT                    ,
                                        START_DATE                ,
                                        CONTRIBUTION              ,
                                        RECOVERY_LEVEL_ID         ,
                                        NB_CURRENT_UNPAID         ,
                                        REMAINING_CAPITAL         ,
                                        SECURITIZED               ,
                                        FIRST_DUE_DATE            ,
                                        NOMINAL_RATE              ,
                                        INITIAL_AMOUNT            ,
                                        FUNDED_ASSET_AMOUNT       ,
                                        DAY_OF_MONTH              ,
                                        LAST_DUE_DATE             ,
                                        VIN                       ,
                                        DELIVERY_DATE             ,
                                        AGREED_MILEAGE            ,
                                        PROFESSIONAL_USE          ,
                                        DEPOSIT_AMOUNT            ,
                                        EXPECTED_RETURN_DATE      ,
                                        REPURCHASE_AMOUNT         ,
                                        REPURCHASE_AMOUNT_HT      ,
                                        BACKOFFICE_PARENT_EXT_REF ,
                                        LAST_UPDATE_DATE          ,
                                        BACKOFFICE_CODE           ,
                                        PRODUCT_CODE              ,
                                        SUB_PRODUCT_CODE          ,
                                        STATE_CODE                ,
                                        NETWORK_CODE              ,
                                        RECOVER_CODE              ,
                                        LOYER_FIN_HT              ,
                                        MT_HT_PRESTATION          ,
                                        MT_LOYER_TOT_HT           ,
                                        MT_AUTRE_MONTANT_HT       ,
                                        MT_AUTRE_MONTANT_TTC      ,
                                        RESTITUTION_DATE          ,
                                        ISBUYBACKMAKE             ,
                                        proposalRef               ,
                                        contract_ref_gp           ,
                                        IS_LEASECO                ,
                                        CONTRACTUAL_MILEAGE       ,
                                        FRANCHISE_MILEAGE         ,
                                        FRANCHISE_CUSTOMER_MILEAGE,
                                        EMAIL                     ,
                                        COEF_VARIATION            ,
                                        COEF_EXTENSION            ,
                                        TYPE_1                    ,
                                        MIN_THRESHOLD_1           ,
                                        MAX_THRESHOLD_1           ,
                                        FINANCIAL_KM_COST_1       ,
                                        RESIDUAL_VALUE_KM_COST_1  ,
                                        TYPE_2                    ,
                                        MIN_THRESHOLD_2           ,
                                        MAX_THRESHOLD_2           ,
                                        FINANCIAL_KM_COST_2       ,
                                        RESIDUAL_VALUE_KM_COST_2  ,
                                        TYPE_3                    ,
                                        MIN_THRESHOLD_3           ,
                                        MAX_THRESHOLD_3           ,
                                        FINANCIAL_KM_COST_3       ,
                                        RESIDUAL_VALUE_KM_COST_3  ,
                                        TYPE_4                    ,
                                        MIN_THRESHOLD_4           ,
                                        MAX_THRESHOLD_4           ,
                                        FINANCIAL_KM_COST_4       ,
                                        RESIDUAL_VALUE_KM_COST_4  ,
                                        TYPE_5                    ,
                                        MIN_THRESHOLD_5           ,
                                        MAX_THRESHOLD_5           ,
                                        FINANCIAL_DURATION_COST_5 ,
                                        TYPE_6                      ,
                                        MIN_THRESHOLD_6             ,
                                        MAX_THRESHOLD_6             ,
                                        FINANCIAL_DURATION_COST_6   ,
                                        TYPE_7                      ,
                                        MIN_THRESHOLD_7             ,
                                        MAX_THRESHOLD_7             ,
                                        FINANCIAL_DURATION_COST_7   ,
                                        TYPE_8                      ,
                                        MIN_THRESHOLD_8             ,
                                        MAX_THRESHOLD_8             ,
                                        FINANCIAL_DURATION_COST_8   ,
                                        CONTRACT_MILEAGE_PER_YEAR

                                )
                                VALUES
                                (
                                        FPAQS_DS_CONTRACT_ID.NEXTVAL      ,
                                        REC.PARENT_ID                     ,
                                        REC.BACKOFFICE_CURRENT_EXT_REF    ,
                                        REC.BACKOFFICE_ID                 ,
                                        REC.PRODUCT_TYPE_ID               ,
                                        REC.PRODUCT_SUBTYPE_ID            ,
                                        REC.CONTRACT_STATE_ID             ,
                                        REC.ORIGIN_STATUS                 ,
                                        REC.STATE_CHANGE_DATE             ,
                                        REC.NETWORK_ID                    ,
                                        REC.ACCOUNTING_STATUS             ,
                                        REC.CURRENCY                      ,
                                        REC.COUNTRY_CODE                  ,
                                        REC.SIGNATURE_DATE                ,
                                        REC.ELECTRONIC_SIGNATURE          ,
                                        REC.ACTIVATION_DATE               ,
                                        REC.INITIAL_DURATION              ,
                                        REC.DURATION                      ,
                                        REC.CLOSING_DATE                  ,
                                        REC.CATEGORY                      ,
                                        REC.AGENCY                        ,
                                        REC.PURGE_DATE                    ,
                                        REC.BALLOON_AMOUNT                ,
                                        REC.NEXT_DUE_DATE                 ,
                                        REC.NEXT_RENT_AMOUNT              ,
                                        REC.NB_REMAIN_RENT                ,
                                        REC.LAST_DUE_AMOUNT_HT            ,
                                        REC.NEXT_RENT_AMOUNT_HT           ,
                                        REC.AMOUNT                        ,
                                        REC.START_DATE                    ,
                                        REC.CONTRIBUTION                  ,
                                        REC.RECOVERY_LEVEL_ID             ,
                                        REC.NB_CURRENT_UNPAID             ,
                                        REC.REMAINING_CAPITAL             ,
                                        REC.SECURITIZED                   ,
                                        REC.FIRST_DUE_DATE                ,
                                        REC.NOMINAL_RATE                  ,
                                        REC.INITIAL_AMOUNT                ,
                                        REC.FUNDED_ASSET_AMOUNT           ,
                                        REC.DAY_OF_MONTH                  ,
                                        REC.LAST_DUE_DATE                 ,
                                        REC.VIN                           ,
                                        REC.DELIVERY_DATE                 ,
                                        REC.AGREED_MILEAGE                ,
                                        REC.PROFESSIONAL_USE              ,
                                        REC.DEPOSIT_AMOUNT                ,
                                        REC.EXPECTED_RETURN_DATE          ,
                                        REC.REPURCHASE_AMOUNT             ,
                                        REC.REPURCHASE_AMOUNT_HT          ,
                                        REC.BACKOFFICE_PARENT_EXTERNAL_REF,
                                        REC.LAST_UPDATE_DATE              ,
                                        REC.BACKOFFICE_CODE               ,
                                        REC.PRODUCT_CODE                  ,
                                        REC.SUB_PRODUCT_CODE              ,
                                        REC.STATE_CODE                    ,
                                        REC.NETWORK_CODE                  ,
                                        REC.RECOVER_CODE                  ,
                                        REC.LOYER_FIN_HT                  ,
                                        NVL(V_MT_HT_PRESTATION, 0)                ,
                                        REC.LOYER_FIN_HT + NVL(V_MT_HT_PRESTATION, 0),
                                        REC.MT_AUTRE_MONTANT_HT           ,
                                        REC.MT_AUTRE_MONTANT_TTC          ,
                                        REC.RESTITUTION_DATE              ,
                                        REC.ISBUYBACKMAKE                 ,
                                        REC.proposalRef                   ,
                                        REC.contract_ref_gp               ,
                                        REC.IS_LEASECO                    ,
                                        REC.CONTRACTUAL_MILEAGE           ,
                                        REC.FRANCHISE_MILEAGE             ,
                                        REC.FRANCHISE_CUSTOMER_MILEAGE    ,
                                        REC.EMAIL                         ,
                                        REC.COEF_VARIATION            ,
                                        REC.COEF_EXTENSION            ,
                                        REC.TYPE_1                    ,
                                        REC.MIN_THRESHOLD_1           ,
                                        REC.MAX_THRESHOLD_1           ,
                                        REC.FINANCIAL_KM_COST_1       ,
                                        REC.RESIDUAL_VALUE_KM_COST_1  ,
                                        REC.TYPE_2                    ,
                                        REC.MIN_THRESHOLD_2           ,
                                        REC.MAX_THRESHOLD_2           ,
                                        REC.FINANCIAL_KM_COST_2       ,
                                        REC.RESIDUAL_VALUE_KM_COST_2  ,
                                        REC.TYPE_3                    ,
                                        REC.MIN_THRESHOLD_3           ,
                                        REC.MAX_THRESHOLD_3           ,
                                        REC.FINANCIAL_KM_COST_3       ,
                                        REC.RESIDUAL_VALUE_KM_COST_3  ,
                                        REC.TYPE_4                    ,
                                        REC.MIN_THRESHOLD_4           ,
                                        REC.MAX_THRESHOLD_4           ,
                                        REC.FINANCIAL_KM_COST_4       ,
                                        REC.RESIDUAL_VALUE_KM_COST_4  ,
                                        REC.TYPE_5                    ,
                                        REC.MIN_THRESHOLD_5           ,
                                        REC.MAX_THRESHOLD_5           ,
                                        REC.FINANCIAL_DURATION_COST_5 ,
                                        REC.TYPE_6                      ,
                                        REC.MIN_THRESHOLD_6             ,
                                        REC.MAX_THRESHOLD_6             ,
                                        REC.FINANCIAL_DURATION_COST_6   ,
                                        REC.TYPE_7                      ,
                                        REC.MIN_THRESHOLD_7             ,
                                        REC.MAX_THRESHOLD_7             ,
                                        REC.FINANCIAL_DURATION_COST_7   ,
                                        REC.TYPE_8                      ,
                                        REC.MIN_THRESHOLD_8             ,
                                        REC.MAX_THRESHOLD_8             ,
                                        REC.FINANCIAL_DURATION_COST_8   ,
                                        CASE WHEN NVL(REC.DURATION, 0) = 0 THEN 0 ELSE (REC.AGREED_MILEAGE / REC.DURATION) * 12 END
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTCONTRACT
                        SET
                                PARENT_ID                 = REC.PARENT_ID                     ,
                                BACKOFFICE_ID             = REC.BACKOFFICE_ID                 ,
                                PRODUCT_TYPE_ID           = REC.PRODUCT_TYPE_ID               ,
                                PRODUCT_SUBTYPE_ID        = REC.PRODUCT_SUBTYPE_ID            ,
                                CONTRACT_STATE_ID         = REC.CONTRACT_STATE_ID             ,
                                ORIGIN_STATUS             = REC.ORIGIN_STATUS                 ,
                                STATE_CHANGE_DATE         = REC.STATE_CHANGE_DATE             ,
                                NETWORK_ID                = REC.NETWORK_ID                    ,
                                ACCOUNTING_STATUS         = REC.ACCOUNTING_STATUS             ,
                                CURRENCY                  = REC.CURRENCY                      ,
                                COUNTRY_CODE              = REC.COUNTRY_CODE                  ,
                                SIGNATURE_DATE            = REC.SIGNATURE_DATE                ,
                                ELECTRONIC_SIGNATURE      = REC.ELECTRONIC_SIGNATURE          ,
                                ACTIVATION_DATE           = REC.ACTIVATION_DATE               ,
                                INITIAL_DURATION          = REC.INITIAL_DURATION              ,
                                DURATION                  = REC.DURATION                      ,
                                CLOSING_DATE              = REC.CLOSING_DATE                  ,
                                CATEGORY                  = REC.CATEGORY                      ,
                                AGENCY                    = REC.AGENCY                        ,
                                PURGE_DATE                = REC.PURGE_DATE                    ,
                                BALLOON_AMOUNT            = REC.BALLOON_AMOUNT                ,
                                NEXT_DUE_DATE             = REC.NEXT_DUE_DATE                 ,
                                NEXT_RENT_AMOUNT          = REC.NEXT_RENT_AMOUNT              ,
                                NB_REMAIN_RENT            = REC.NB_REMAIN_RENT                ,
                                LAST_DUE_AMOUNT_HT        = REC.LAST_DUE_AMOUNT_HT            ,
                                NEXT_RENT_AMOUNT_HT       = REC.NEXT_RENT_AMOUNT_HT           ,
                                AMOUNT                    = REC.AMOUNT                        ,
                                START_DATE                = REC.START_DATE                    ,
                                CONTRIBUTION              = REC.CONTRIBUTION                  ,
                                RECOVERY_LEVEL_ID         = REC.RECOVERY_LEVEL_ID             ,
                                NB_CURRENT_UNPAID         = REC.NB_CURRENT_UNPAID             ,
                                REMAINING_CAPITAL         = REC.REMAINING_CAPITAL             ,
                                SECURITIZED               = REC.SECURITIZED                   ,
                                FIRST_DUE_DATE            = REC.FIRST_DUE_DATE                ,
                                NOMINAL_RATE              = REC.NOMINAL_RATE                  ,
                                INITIAL_AMOUNT            = REC.INITIAL_AMOUNT                ,
                                FUNDED_ASSET_AMOUNT       = REC.FUNDED_ASSET_AMOUNT           ,
                                DAY_OF_MONTH              = REC.DAY_OF_MONTH                  ,
                                LAST_DUE_DATE             = REC.LAST_DUE_DATE                 ,
                                VIN                       = REC.VIN                           ,
                                DELIVERY_DATE             = REC.DELIVERY_DATE                 ,
                                AGREED_MILEAGE            = REC.AGREED_MILEAGE                ,
                                PROFESSIONAL_USE          = REC.PROFESSIONAL_USE              ,
                                DEPOSIT_AMOUNT            = REC.DEPOSIT_AMOUNT                ,
                                EXPECTED_RETURN_DATE      = REC.EXPECTED_RETURN_DATE          ,
                                REPURCHASE_AMOUNT         = REC.REPURCHASE_AMOUNT             ,
                                REPURCHASE_AMOUNT_HT      = REC.REPURCHASE_AMOUNT_HT          ,
                                BACKOFFICE_PARENT_EXT_REF = REC.BACKOFFICE_PARENT_EXTERNAL_REF,
                                LAST_UPDATE_DATE          = REC.LAST_UPDATE_DATE              ,
                                BACKOFFICE_CODE           = REC.BACKOFFICE_CODE               ,
                                PRODUCT_CODE              = REC.PRODUCT_CODE                  ,
                                SUB_PRODUCT_CODE          = REC.SUB_PRODUCT_CODE              ,
                                STATE_CODE                = REC.STATE_CODE                    ,
                                NETWORK_CODE              = REC.NETWORK_CODE                  ,
                                RECOVER_CODE              = REC.RECOVER_CODE                  ,
                                LOYER_FIN_HT              = REC.LOYER_FIN_HT                  ,
                                MT_HT_PRESTATION          = NVL(V_MT_HT_PRESTATION, 0)              ,
                                MT_LOYER_TOT_HT           = REC.LOYER_FIN_HT + NVL(V_MT_HT_PRESTATION, 0)               ,
                                MT_AUTRE_MONTANT_HT       = REC.MT_AUTRE_MONTANT_HT           ,
                                MT_AUTRE_MONTANT_TTC      = REC.MT_AUTRE_MONTANT_TTC          ,
                                RESTITUTION_DATE          = REC.RESTITUTION_DATE              ,
                                ISBUYBACKMAKE             = REC.ISBUYBACKMAKE                 ,
                                proposalRef               = REC.proposalRef                   ,
                                contract_ref_gp           = REC.contract_ref_gp               ,
                                IS_LEASECO                = REC.IS_LEASECO                    ,
                                CONTRACTUAL_MILEAGE       = REC.CONTRACTUAL_MILEAGE           ,
                                FRANCHISE_MILEAGE         = REC.FRANCHISE_MILEAGE             ,
                                FRANCHISE_CUSTOMER_MILEAGE = REC.FRANCHISE_CUSTOMER_MILEAGE   ,
                                EMAIL                      = REC.EMAIL                        ,
                                COEF_VARIATION             = REC.COEF_VARIATION               ,
                                COEF_EXTENSION             = REC.COEF_EXTENSION               ,
                                TYPE_1                     = REC.TYPE_1                       ,
                                MIN_THRESHOLD_1            = REC.MIN_THRESHOLD_1              ,
                                MAX_THRESHOLD_1            = REC.MAX_THRESHOLD_1              ,
                                FINANCIAL_KM_COST_1        = REC.FINANCIAL_KM_COST_1          ,
                                RESIDUAL_VALUE_KM_COST_1   = REC.RESIDUAL_VALUE_KM_COST_1     ,
                                TYPE_2                     = REC.TYPE_2                       ,
                                MIN_THRESHOLD_2            = REC.MIN_THRESHOLD_2              ,
                                MAX_THRESHOLD_2            = REC.MAX_THRESHOLD_2              ,
                                FINANCIAL_KM_COST_2        = REC.FINANCIAL_KM_COST_2          ,
                                RESIDUAL_VALUE_KM_COST_2   = REC.RESIDUAL_VALUE_KM_COST_2     ,
                                TYPE_3                     = REC.TYPE_3                       ,
                                MIN_THRESHOLD_3            = REC.MIN_THRESHOLD_3              ,
                                MAX_THRESHOLD_3            = REC.MAX_THRESHOLD_3              ,
                                FINANCIAL_KM_COST_3        = REC.FINANCIAL_KM_COST_3          ,
                                RESIDUAL_VALUE_KM_COST_3   = REC.RESIDUAL_VALUE_KM_COST_3     ,
                                TYPE_4                     = REC.TYPE_4                       ,
                                MIN_THRESHOLD_4            = REC.MIN_THRESHOLD_4              ,
                                MAX_THRESHOLD_4            = REC.MAX_THRESHOLD_4              ,
                                FINANCIAL_KM_COST_4        = REC.FINANCIAL_KM_COST_4          ,
                                RESIDUAL_VALUE_KM_COST_4   = REC.RESIDUAL_VALUE_KM_COST_4     ,
                                TYPE_5                     = REC.TYPE_5                       ,
                                MIN_THRESHOLD_5            = REC.MIN_THRESHOLD_5              ,
                                MAX_THRESHOLD_5            = REC.MAX_THRESHOLD_5              ,
                                FINANCIAL_DURATION_COST_5  = REC.FINANCIAL_DURATION_COST_5    ,
                                TYPE_6                      = REC.TYPE_6                      ,
                                MIN_THRESHOLD_6             = REC.MIN_THRESHOLD_6             ,
                                MAX_THRESHOLD_6             = REC.MAX_THRESHOLD_6             ,
                                FINANCIAL_DURATION_COST_6   = REC.FINANCIAL_DURATION_COST_6   ,
                                TYPE_7                      = REC.TYPE_7                      ,
                                MIN_THRESHOLD_7             = REC.MIN_THRESHOLD_7             ,
                                MAX_THRESHOLD_7             = REC.MAX_THRESHOLD_7             ,
                                FINANCIAL_DURATION_COST_7   = REC.FINANCIAL_DURATION_COST_7   ,
                                TYPE_8                      = REC.TYPE_8                      ,
                                MIN_THRESHOLD_8             = REC.MIN_THRESHOLD_8             ,
                                MAX_THRESHOLD_8             = REC.MAX_THRESHOLD_8             ,
                                FINANCIAL_DURATION_COST_8   = REC.FINANCIAL_DURATION_COST_8   ,
                                CONTRACT_MILEAGE_PER_YEAR   = CASE WHEN NVL(REC.DURATION, 0) = 0 THEN 0 ELSE (REC.AGREED_MILEAGE / REC.DURATION) * 12 END
                        WHERE
                                BACKOFFICE_CURRENT_EXT_REF = REC.BACKOFFICE_CURRENT_EXT_REF
                        AND     BACKOFFICE_CODE            = REC.BACKOFFICE_CODE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.BACKOFFICE_CURRENT_EXT_REF);
                        --EXIT;
                END;
                
                
                BEGIN
                  SELECT  CONTRACT.ID
                  INTO    V_CONTRACT_ID
                  FROM    FPADS.FPADS_QTCONTRACT CONTRACT
                  WHERE   CONTRACT.BACKOFFICE_CURRENT_EXT_REF = REC.BACKOFFICE_CURRENT_EXT_REF
                  AND     CONTRACT.BACKOFFICE_CODE            = REC.BACKOFFICE_CODE;
                EXCEPTION WHEN OTHERS THEN
                  V_CONTRACT_ID := NULL;
                END;
                
                IF V_CONTRACT_ID IS NOT NULL THEN 
                ------- GRID 1 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_1,
                                  2,
                                  REC.MIN_THRESHOLD_1,
                                  REC.MAX_THRESHOLD_1,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_1,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_1,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_1,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_1,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_1
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 1 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 2 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_2,
                                  1,
                                  REC.MIN_THRESHOLD_2,
                                  REC.MAX_THRESHOLD_2,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_2,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_2,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_2,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_2,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_2
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 2 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 3 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_3,
                                  1,
                                  REC.MIN_THRESHOLD_3,
                                  REC.MAX_THRESHOLD_3,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_3,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_3,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_3,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_3,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_3
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 3 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 4 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_4,
                                  2,
                                  REC.MIN_THRESHOLD_4,
                                  REC.MAX_THRESHOLD_4,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_4,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_4,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_4,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_4,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_4
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 4 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 1 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_1,
                                  2,
                                  REC.MIN_THRESHOLD_1,
                                  REC.MAX_THRESHOLD_1,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_1,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_1,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_1,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_1,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_1
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 1 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
              
              ------- GRID 2 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_2,
                                  1,
                                  REC.MIN_THRESHOLD_2,
                                  REC.MAX_THRESHOLD_2,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_2,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_2,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_2,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_2,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_2
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 2 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                
            ------- GRID 3 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_3,
                                  1,
                                  REC.MIN_THRESHOLD_3,
                                  REC.MAX_THRESHOLD_3,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_3,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_3,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_3,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_3,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_3
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 3 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
              ------- GRID 4 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_4,
                                  2,
                                  REC.MIN_THRESHOLD_4,
                                  REC.MAX_THRESHOLD_4,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_4,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_4,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_4,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_4,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_4
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 4 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                
            ------- GRID 1 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_5,
                                  2,
                                  REC.MIN_THRESHOLD_5,
                                  REC.MAX_THRESHOLD_5,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_5,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_5,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_5,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_5,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_5
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 1 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 2 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_6,
                                  1,
                                  REC.MIN_THRESHOLD_6,
                                  REC.MAX_THRESHOLD_6,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_6,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_6,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_6,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_6,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_6
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 2 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 3 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_7,
                                  1,
                                  REC.MIN_THRESHOLD_7,
                                  REC.MAX_THRESHOLD_7,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_7,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_7,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_7,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_7,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_7
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 3 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                
            ------- GRID 4 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_8,
                                  2,
                                  REC.MIN_THRESHOLD_8,
                                  REC.MAX_THRESHOLD_8,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_8,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_8,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_8,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_8,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_8
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 4 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                END IF;
                
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_CTR_EKIP;

FUNCTION ALIM_STRUCTURE_EKIP (NOMLOG       VARCHAR2,
                              P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID         AS CONTRACT_ID           ,
                        NULL           AS STRUCT_TYPE_ID        ,
                        SOC_JUR_CD     AS EXT_REFERENCE_VALUE   ,
                        P_DATE_TRAIT   AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'    AS AUDIT_LAST_UPDATE_USER,
                        CTC.SOC_JUR_CD AS CODE_STRUCTURE
                FROM
                        FPALLD.FPAQTCTC        CTC,
                        FPADS.FPADS_QTCONTRACT CTR
                WHERE
                        CTR.BACKOFFICE_CURRENT_EXT_REF = CTC.REF_NO
                AND     CTC.CD_SOURCE                  = 'EKIP'
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_EKIP', '## ALIM_STRUCTURE_EKIP ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTSTRUCTURE
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        STRUCT_TYPE_ID        ,
                                        EXT_REFERENCE_VALUE   ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        CODE_STRUCTURE
                                )
                                VALUES
                                (
                                        FPAQS_DS_STRUCTURE_ID.NEXTVAL,
                                        REC.CONTRACT_ID                 ,
                                        REC.STRUCT_TYPE_ID              ,
                                        REC.EXT_REFERENCE_VALUE         ,
                                        REC.AUDIT_LAST_UPDATE_DATE      ,
                                        REC.AUDIT_LAST_UPDATE_USER      ,
                                        REC.CODE_STRUCTURE
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSTRUCTURE
                        SET
                                STRUCT_TYPE_ID         = REC.STRUCT_TYPE_ID        ,
                                CODE_STRUCTURE         = REC.CODE_STRUCTURE        ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER
                        WHERE
                                CONTRACT_ID         = REC.CONTRACT_ID
                        AND     EXT_REFERENCE_VALUE = REC.EXT_REFERENCE_VALUE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        dbms_output.put_line(SQLERRM
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_EKIP', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_EKIP', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_EKIP', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_EKIP', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_STRUCTURE_EKIP;

FUNCTION ALIM_PAYMEANS_EKIP (NOMLOG       VARCHAR2,
                             P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID AS CONTRACT_ID                                             ,
                        NULL   AS PM_TYPE_ID                                              ,
                        NULL   AS PM_STATUS_ID                                            ,
                        NULL   AS STATUS_DATE                                             ,
                        CTC.REF_NO                                                        ,
                        CTC.BANQUE_CD_PRI                        AS RIB_BANK              ,
                        CTC.COD_GUICHET_CD_PRI                   AS RIB_AGENCY            ,
                        CTC.CTE_DOM_NO_PRI                       AS RIB_ACCOUNT           ,
                        CTC.RIB_CL_PRI                           AS RIB_KEY               ,
                        CTC.BANQUE_LIB_PRI                       AS BANK_NAME             ,
                        NULL                                     AS BANK_ADDRESS          ,
                        NULL                                     AS BANK_ZIPCODE          ,
                        CTC.VILLE_NOM_RIB_PRI                    AS BANK_CITY             ,
                        NULL                                     AS BANK_COUNTRY          ,
                        NULL                                     AS RUM                   ,
                        NULL                                     AS BIC                   ,
                        NULL                                     AS IBAN                  ,
                        NULL                                     AS ICS                   ,
                        TO_NUMBER(SUBSTR(TIE.ID_CLI_BCU, 2, 10)) AS NUMBER_BCU            ,
                        P_DATE_TRAIT                             AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'                              AS AUDIT_LAST_UPDATE_USER,
                        CTC.REGL_FIN_CD                          AS CODE_PM_TYPE          ,
                        NULL                                     AS CODE_PM_STATUS
                FROM
                        FPALLD.FPAQTCTC        CTC,
                        FPALLD.FPAQTELT        ELT,
                        FPALLD.FPAQTTIE        TIE,
                        FPADS.FPADS_QTCONTRACT CTR
                WHERE
                        CTC.REF_NO                     = ELT.REF_NO
                AND     CTC.ID_CLIE                    = TIE.ID_TIERS
                AND     ELT.DER_ELEMENT                = 'O'
                AND     CTC.CD_SOURCE                  = 'EKIP'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = CTC.REF_NO
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_EKIP', '## ALIM_PAYMEANS_EKIP ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTPAYMEANS
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        PM_TYPE_ID            ,
                                        PM_STATUS_ID          ,
                                        STATUS_DATE           ,
                                        RIB_BANK              ,
                                        RIB_AGENCY            ,
                                        RIB_ACCOUNT           ,
                                        RIB_KEY               ,
                                        BANK_NAME             ,
                                        BANK_ADDRESS          ,
                                        BANK_ZIPCODE          ,
                                        BANK_CITY             ,
                                        BANK_COUNTRY          ,
                                        RUM                   ,
                                        BIC                   ,
                                        IBAN                  ,
                                        ICS                   ,
                                        NUMBER_BCU            ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        CODE_PM_TYPE          ,
                                        CODE_PM_STATUS
                                )
                                VALUES
                                (
                                        FPAQS_DS_PAYMEANS_ID.NEXTVAL,
                                        REC.CONTRACT_ID             ,
                                        REC.PM_TYPE_ID              ,
                                        REC.PM_STATUS_ID            ,
                                        REC.STATUS_DATE             ,
                                        REC.RIB_BANK                ,
                                        REC.RIB_AGENCY              ,
                                        REC.RIB_ACCOUNT             ,
                                        REC.RIB_KEY                 ,
                                        REC.BANK_NAME               ,
                                        REC.BANK_ADDRESS            ,
                                        REC.BANK_ZIPCODE            ,
                                        REC.BANK_CITY               ,
                                        REC.BANK_COUNTRY            ,
                                        REC.RUM                     ,
                                        REC.BIC                     ,
                                        REC.IBAN                    ,
                                        REC.ICS                     ,
                                        REC.NUMBER_BCU              ,
                                        REC.AUDIT_LAST_UPDATE_DATE  ,
                                        REC.AUDIT_LAST_UPDATE_USER  ,
                                        REC.CODE_PM_TYPE            ,
                                        REC.CODE_PM_STATUS
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTPAYMEANS
                        SET
                                PM_TYPE_ID             = REC.PM_TYPE_ID            ,
                                PM_STATUS_ID           = REC.PM_STATUS_ID          ,
                                STATUS_DATE            = REC.STATUS_DATE           ,
                                RIB_BANK               = REC.RIB_BANK              ,
                                RIB_AGENCY             = REC.RIB_AGENCY            ,
                                RIB_ACCOUNT            = REC.RIB_ACCOUNT           ,
                                RIB_KEY                = REC.RIB_KEY               ,
                                BANK_NAME              = REC.BANK_NAME             ,
                                BANK_ADDRESS           = REC.BANK_ADDRESS          ,
                                BANK_ZIPCODE           = REC.BANK_ZIPCODE          ,
                                BANK_CITY              = REC.BANK_CITY             ,
                                BANK_COUNTRY           = REC.BANK_COUNTRY          ,
                                RUM                    = REC.RUM                   ,
                                BIC                    = REC.BIC                   ,
                                IBAN                   = REC.IBAN                  ,
                                ICS                    = REC.ICS                   ,
                                NUMBER_BCU             = REC.NUMBER_BCU            ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                CODE_PM_TYPE           = REC.CODE_PM_TYPE          ,
                                CODE_PM_STATUS         = REC.CODE_PM_STATUS
                        WHERE
                                CONTRACT_ID = REC.CONTRACT_ID;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_EKIP', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_EKIP', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_EKIP', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_EKIP', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_EKIP', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_PAYMEANS_EKIP;

FUNCTION ALIM_SERVICE_EKIP (NOMLOG       VARCHAR2,
                            P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID AS CONTRACT_ID                         ,
                        CTC.REF_NO                                    ,
                        PRS.PREST_INT_ID AS EXTERNAL_REFERENCE        ,
                        PRS.POL_PREST_NO AS REFERENCE_NUMBER          ,
                        SERV_TYPE.ID     AS SERV_TYPE_ID              ,
                        GPA.PRS_CODE_CONTRAT_PRESTATION               ,
                        GPA.PRS_LIBELLE_SERVICE AS DESCRIPTION        ,
                        PRS.DEB_FAC_PRS_DAT     AS APPLYING_START_DATE,
                        PRS.FIN_FAC_PRS_DAT     AS APPLYING_END_DATE  ,
                        /*(FIN_FAC_PRS_DAT - DEB_FAC_PRS_DAT) / 30*/
                        NULL                  AS DURATION              ,
                        PRS.PREST_UN_TC_MT    AS MENSUAL_AMOUNT        ,
                        PRS.FIN_FAC_PRS_DAT_1 AS RESILATION_DATE       ,
                        P_DATE_TRAIT          AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'           AS AUDIT_LAST_UPDATE_USER,
                        PRS.PREST_MT_HT       AS MENSUAL_AMOUNT_HT     ,
                        PRS.PREST_MT_TTC      AS SERVICE_MENSUAL_AMOUNT,
                        PRS.POL_PREST_NO      AS CODE_SERVICE,
                        PRS.MT_EXCEDENT_B1    AS MAINTENANCE_KM_COST_1,
                        PRS.MT_EXCEDENT_B2    AS MAINTENANCE_KM_COST_2,
                        PRS.MT_EXCEDENT_B3    AS MAINTENANCE_KM_COST_3,
                        PRS.MT_EXCEDENT_B4    AS MAINTENANCE_KM_COST_4,
                        PRS.PRC_SERVICE_B1    AS MAINTENANCE_DURATION_COST_5,
                        PRS.PRC_SERVICE_B2    AS MAINTENANCE_DURATION_COST_6,
                        PRS.PRC_SERVICE_B3    AS MAINTENANCE_DURATION_COST_7,
                        PRS.PRC_SERVICE_B4    AS MAINTENANCE_DURATION_COST_8,
                        'EKIP'                AS BACKOFFICE_CODE,
                        ELT.VAL_MIN_DUR              AS COEF_VARIATION,
                        ELT.VAL_MAX_DUR              AS COEF_EXTENSION,
                        'UNDER'                      AS TYPE_1,
                        ELT.KM_INF_P2_NB             AS MIN_THRESHOLD_1,
                        ELT.KM_INF_P1_NB-1           AS MAX_THRESHOLD_1,
                        'UNDER'                      AS TYPE_2,
                        ELT.KM_INF_P1_NB             AS MIN_THRESHOLD_2,
                        CTC.KILOMETRAGE-1            AS MAX_THRESHOLD_2,
                        'EXCESS'                     AS TYPE_3,
                        CTC.KILOMETRAGE              AS MIN_THRESHOLD_3,
                        ELT.KM_SUP_P1_NB             AS MAX_THRESHOLD_3,
                        'EXCESS'                     AS TYPE_4,
                        ELT.KM_SUP_P1_NB+1           AS MIN_THRESHOLD_4,
                        ELT.KM_SUP_P2_NB             AS MAX_THRESHOLD_4,
                        'UNDER'                      AS TYPE_5,
                        CTC.TPLUS_REDUC_B2           AS MIN_THRESHOLD_5,
                        CTC.TPLUS_REDUC_B1           AS MAX_THRESHOLD_5,
                        'UNDER'                      AS TYPE_6,
                        CTC.TPLUS_REDUC_B1           AS MIN_THRESHOLD_6,
                        CTC.CR_TOT_DUR               AS MAX_THRESHOLD_6,
                        'EXCESS'                     AS TYPE_7,
                        CTC.CR_TOT_DUR+1             AS MIN_THRESHOLD_7,
                        CTC.TPLUS_PROLONG_B1         AS MAX_THRESHOLD_7,
                        'UNDER'                      AS TYPE_8,
                        CTC.TPLUS_PROLONG_B1+1       AS MIN_THRESHOLD_8,
                        CTC.TPLUS_PROLONG_B2         AS MAX_THRESHOLD_8
                FROM
                        FPALLD.FPAQTCTC     CTC,
                        FPALLD.FPAQTELT     ELT,
                        FPALLD.FPAQTPRS     PRS,
                        FPALLD.FPAQTPRS_GPA GPA,
                        FPADS.FPADS_QTCONTRACT    CTR,
                        FPADS.FPAQTNOM      SERV_TYPE
                WHERE
                        CTC.REF_NO                     = ELT.REF_NO
                AND     CTC.REF_NO                     = PRS.REF_NO
                AND     PRS.REF_NO                     = GPA.PRS_IE_AFFAIRE(+)
                AND     GPA.PRS_CODE_SERVICE(+)        = PRS.POL_PREST_NO
                AND     ELT.DER_ELEMENT                = 'O'
                AND     CTC.CD_SOURCE                  = 'EKIP'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = PRS.REF_NO
                AND     SERV_TYPE.GROUP_TYPE(+)        = 'SERV_TYPE'
                AND     SERV_TYPE.CODE(+)              = GPA.PRS_CODE_CONTRAT_PRESTATION
                AND     PRS.PRES_CD_1                  NOT IN ('MAJO', 'FPRO')
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', '## ALIM_SERVICE_EKIP ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTSERVICES
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        EXTERNAL_REFERENCE    ,
                                        REFERENCE_NUMBER      ,
                                        SERV_TYPE_ID          ,
                                        DESCRIPTION           ,
                                        APPLYING_START_DATE   ,
                                        APPLYING_END_DATE     ,
                                        DURATION              ,
                                        MENSUAL_AMOUNT        ,
                                        RESILATION_DATE       ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        MENSUAL_AMOUNT_HT     ,
                                        SERVICE_MENSUAL_AMOUNT,
                                        CODE_SERVICE          ,
                                        MAINTENANCE_KM_COST_1 ,
                                        MAINTENANCE_KM_COST_2 ,
                                        MAINTENANCE_KM_COST_3 ,
                                        MAINTENANCE_KM_COST_4 ,
                                        MAINTENANCE_DURATION_COST_5,
                                        MAINTENANCE_DURATION_COST_6,
                                        MAINTENANCE_DURATION_COST_7,
                                        MAINTENANCE_DURATION_COST_8
                                )
                                VALUES
                                (
                                        FPAQS_DS_SERVICE_ID.NEXTVAL,
                                        REC.CONTRACT_ID            ,
                                        REC.EXTERNAL_REFERENCE     ,
                                        REC.REFERENCE_NUMBER       ,
                                        REC.SERV_TYPE_ID           ,
                                        REC.DESCRIPTION            ,
                                        REC.APPLYING_START_DATE    ,
                                        REC.APPLYING_END_DATE      ,
                                        REC.DURATION               ,
                                        REC.MENSUAL_AMOUNT         ,
                                        REC.RESILATION_DATE        ,
                                        REC.AUDIT_LAST_UPDATE_DATE ,
                                        REC.AUDIT_LAST_UPDATE_USER ,
                                        REC.MENSUAL_AMOUNT_HT      ,
                                        REC.SERVICE_MENSUAL_AMOUNT ,
                                        REC.CODE_SERVICE           ,
                                        REC.MAINTENANCE_KM_COST_1 ,
                                        REC.MAINTENANCE_KM_COST_2 ,
                                        REC.MAINTENANCE_KM_COST_3 ,
                                        REC.MAINTENANCE_KM_COST_4 ,
                                        REC.MAINTENANCE_DURATION_COST_5,
                                        REC.MAINTENANCE_DURATION_COST_6,
                                        REC.MAINTENANCE_DURATION_COST_7,
                                        REC.MAINTENANCE_DURATION_COST_8
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSERVICES
                        SET
                                CONTRACT_ID            = REC.CONTRACT_ID           ,
                                EXTERNAL_REFERENCE     = REC.EXTERNAL_REFERENCE    ,
                                REFERENCE_NUMBER       = REC.REFERENCE_NUMBER      ,
                                SERV_TYPE_ID           = REC.SERV_TYPE_ID          ,
                                DESCRIPTION            = REC.DESCRIPTION           ,
                                APPLYING_START_DATE    = REC.APPLYING_START_DATE   ,
                                APPLYING_END_DATE      = REC.APPLYING_END_DATE     ,
                                DURATION               = REC.DURATION              ,
                                MENSUAL_AMOUNT         = REC.MENSUAL_AMOUNT        ,
                                RESILATION_DATE        = REC.RESILATION_DATE       ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                MENSUAL_AMOUNT_HT      = REC.MENSUAL_AMOUNT_HT     ,
                                SERVICE_MENSUAL_AMOUNT = REC.SERVICE_MENSUAL_AMOUNT,
                                CODE_SERVICE           = REC.CODE_SERVICE          ,
                                MAINTENANCE_KM_COST_1  = REC.MAINTENANCE_KM_COST_1 ,
                                MAINTENANCE_KM_COST_2  = REC.MAINTENANCE_KM_COST_2 ,
                                MAINTENANCE_KM_COST_3  = REC.MAINTENANCE_KM_COST_3 ,
                                MAINTENANCE_KM_COST_4  = REC.MAINTENANCE_KM_COST_4 ,
                                MAINTENANCE_DURATION_COST_5 = REC.MAINTENANCE_DURATION_COST_5 ,
                                MAINTENANCE_DURATION_COST_6 = REC.MAINTENANCE_DURATION_COST_6 ,
                                MAINTENANCE_DURATION_COST_7 = REC.MAINTENANCE_DURATION_COST_7 ,
                                MAINTENANCE_DURATION_COST_8 = REC.MAINTENANCE_DURATION_COST_8
                        WHERE
                                CONTRACT_ID  = REC.CONTRACT_ID
                        AND     CODE_SERVICE = REC.CODE_SERVICE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
                
                ------- GRID 1 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_1,
                                  2,
                                  REC.MIN_THRESHOLD_1,
                                  REC.MAX_THRESHOLD_1,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_1,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_1,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_1,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_1,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_1
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 1 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 2 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_2,
                                  1,
                                  REC.MIN_THRESHOLD_2,
                                  REC.MAX_THRESHOLD_2,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_2,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_2,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_2,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_2,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_2
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 2 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                ------- GRID 3 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_3,
                                  1,
                                  REC.MIN_THRESHOLD_3,
                                  REC.MAX_THRESHOLD_3,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_3,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_3,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_3,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_3,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_3
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 3 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
            ------- GRID 4 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_4,
                                  2,
                                  REC.MIN_THRESHOLD_4,
                                  REC.MAX_THRESHOLD_4,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_4,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_4,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_4,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_4,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_4
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 4 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                ------- GRID 1 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_5,
                                  2,
                                  REC.MIN_THRESHOLD_5,
                                  REC.MAX_THRESHOLD_5,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_5,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_5,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_5,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_5,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_5
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 1 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 2 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_6,
                                  1,
                                  REC.MIN_THRESHOLD_6,
                                  REC.MAX_THRESHOLD_6,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_6,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_6,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_6,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_6,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_6
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 2 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 3 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_7,
                                  1,
                                  REC.MIN_THRESHOLD_7,
                                  REC.MAX_THRESHOLD_7,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_7,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_7,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_7,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_7,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_7
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 3 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 4 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_8,
                                  2,
                                  REC.MIN_THRESHOLD_8,
                                  REC.MAX_THRESHOLD_8,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_8,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_8,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_8,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_8,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_8
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 4 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_SERVICE_EKIP;

FUNCTION ALIM_STAKEHOLDERS_EKIP (NOMLOG       VARCHAR2,
                                 P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                WITH
                        POPULATION AS
                        (
                                SELECT
                                        CTC.REF_NO                                       ,
                                        LN.TIERS_EXT_ID                                  ,
                                        CASE WHEN LN.ROLE_CD = 'CLIE' THEN NVL(NVL(NVL(FQ.NUMERO_BCU, DE.DE_IN_NIF), TIE.ID_CLI_BCU), REF_EXTERNE_CD)
                                             ELSE NVL(NVL(FQ.NUMERO_BCU, TIE.ID_CLI_BCU), REF_EXTERNE_CD)
                                        END AS ID_CLI_BCU,
                                        TIE.SIREN                                        ,
                                        LN.ROLE_CD                                       ,
                                        NOM_LIB                                          ,
                                        PRENOM_LIB                                       ,
                                        CASE WHEN LN.ROLE_CD = 'CLIE' THEN NVL(GPA.CTC_TELEPHONE_FIXE_1_CLIENT, TIE.TEL_CONTACT)
                                             ELSE TIE.TEL_CONTACT
                                        END  AS TEL_CONTACT                              ,
                                        CASE WHEN LN.ROLE_CD = 'CLIE' THEN NVL(GPA.CTC_EMAIL_CONTACT, NVL(TIE.MAIL_CLIENT, DE.DE_IN_EMAIL))
                                             ELSE TIE.MAIL_CLIENT 
                                        END  AS MAIL_CLIENT                              ,
                                        TIA.VOIE_NO                                      ,
                                        TIA.RESID_LIB_1                                  ,
                                        TIA.POSTAL_CD_1                                  ,
                                        TIA.Ville_Nom_Adr                                ,
                                        ADRESSE_FACTURATION                              ,
                                        CDPOSTAL_ADR_FACTURE                             ,
                                        VILLE_ADR_FACTURE                                ,
                                        ADRESSE_POSTALE                                  ,
                                        CDPOSTAL_ADR_POSTALE                             ,
                                        VILLE_ADR_POSTALE                                ,
                                        RANK() OVER(PARTITION BY
                                                    CTC.REF_NO, LN.TIERS_EXT_ID, LN.ROLE_CD ORDER BY
                                                    LN.TIERS_EXT_ID DESC, LN.ROLE_CD DESC, ID_TIERS DESC) RANK
                                FROM
                                        FPALLD.FPAQTCTC CTC,
                                        FPA.FPAQTFQ FQ,
                                        FPALLD.FPAQTCTC_GPA GPA,
                                        FPALLD.FPAQTTIE TIE,
                                        FPALLD.FPAQTLN  LN ,
                                        FPALLD.FPAQTTIA TIA,
                                        FPA.FPAQTDE DE
                                WHERE
                                        CTC.REF_NO       = LN.REF_NO
                                AND     LN.TIERS_EXT_ID  = TIE.TIERS_EXT_ID
                                AND     CTC.CD_SOURCE    = 'EKIP'
                                AND     TIA.CD_SOURCE    = TIE.CD_SOURCE
                                AND     TIA.TIERS_EXT_ID = TIE.TIERS_EXT_ID
                                AND     TIA.ADRESSE_NO   = TIE.ADRESSE_NO
                                AND     DE.DE_DE_NUMCONT(+) = CTC.REF_NO
                                AND     GPA.CTC_IE_AFFAIRE(+) = CTC.REF_NO
                                AND     FQ.NUMERO_EKIP(+)     = TIE.TIERS_EXT_ID
                                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                        )
                SELECT
                        CTR.ID                                                                                                          AS CONTRACT_ID           ,
                        CASE WHEN SUBSTR(ID_CLI_BCU, 1 ,1) = 'B' THEN TO_CHAR(TO_NUMBER(SUBSTR(ID_CLI_BCU, 2, 10))) ELSE ID_CLI_BCU END AS NUMBER_BCU            ,
                        NULL                                                                                                            AS REF_PERSON            ,
                        USERR.ID                                                                                                        AS USER_ROLE_ID          ,
                        SIREN                                                                                                           AS SIREN                 ,
                        P_DATE_TRAIT                                                                                                    AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'                                                                                                     AS AUDIT_LAST_UPDATE_USER,
                        ROLE_CD                                                                                                         AS CODE_ROLE             ,
                        NOM_LIB                                                                                                         AS NOM_LIB               ,
                        PRENOM_LIB                                                                                                      AS PRENOM_LIB            ,
                        NULL                                                                                                            AS RRDI                  ,
                        TEL_CONTACT                                                                                                                              ,
                        MAIL_CLIENT                                                                                                                              ,
                        VOIE_NO                                                                                                                                  ,
                        RESID_LIB_1                                                                                                                              ,
                        POSTAL_CD_1                                                                                                                              ,
                        Ville_Nom_Adr                                                                                                                            ,
                        ADRESSE_FACTURATION                                                                                                                      ,
                        CDPOSTAL_ADR_FACTURE                                                                                                                     ,
                        VILLE_ADR_FACTURE                                                                                                                        ,
                        ADRESSE_POSTALE                                                                                                                          ,
                        CDPOSTAL_ADR_POSTALE                                                                                                                     ,
                        VILLE_ADR_POSTALE
                FROM
                        POPULATION          ,
                        FPADS_QTCONTRACT CTR,
                        FPADS.FPAQTNOM   USERR
                WHERE
                        RANK                           = 1
                AND     ID_CLI_BCU           IS NOT NULL
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = REF_NO
                AND     USERR.GROUP_TYPE(+)            = 'USER_ROLE'
                AND     USERR.CODE(+)                  = ROLE_CD
                
                UNION
                
                SELECT
                        CTR.ID                                 AS CONTRACT_ID           ,
                        FPALLD.DET_CTR_COURANT.TIERS_APPORTEUR AS NUMBER_BCU            ,
                        NULL                                   AS REF_PERSON            ,
                        USERR.ID                               AS USER_ROLE_ID          ,
                        REF_INFOS_PDV_APPORTEUR.AP_CN_CDSIREN  AS SIREN                 ,
                        P_DATE_TRAIT                           AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'                            AS AUDIT_LAST_UPDATE_USER,
                        'APPO'                                 AS CODE_ROLE             ,
                        AP_CN_NOMLG                            AS NOM_LIB               ,
                        NULL                                   AS PRENOM_LIB            ,
                        FPALLD.DET_CTR_COURANT.TIERS_APPORTEUR AS RRDI                  ,
                        REF_INFOS_PDV_APPORTEUR.AP_CN_TEL      AS TEL_CONTACT           ,
                        NULL                                   AS MAIL_CLIENT           ,
                        NULL                                   AS VOIE_NO               ,
                        REF_INFOS_PDV_APPORTEUR.AP_AE_ADR      AS RESID_LIB_1           ,
                        REF_INFOS_PDV_APPORTEUR.AP_AE_CDPOS    AS POSTAL_CD_1           ,
                        REF_INFOS_PDV_APPORTEUR.AP_AE_LOCALITE AS VILLE_NOM_ADR         ,
                        NULL                                      ADRESSE_FACTURATION   ,
                        NULL                                      CDPOSTAL_ADR_FACTURE  ,
                        NULL                                      VILLE_ADR_FACTURE     ,
                        NULL                                      ADRESSE_POSTALE       ,
                        NULL                                      CDPOSTAL_ADR_POSTALE  ,
                        NULL                                      VILLE_ADR_POSTALE
                FROM
                        FPALLD.DET_CTR_COURANT                      ,
                        FPALLD.REF_INFOS_PDV REF_INFOS_PDV_APPORTEUR,
                        FPADS.FPAQTNOM       USERR                  ,
                        FPADS_QTCONTRACT     CTR
                WHERE
                        (
                                REF_INFOS_PDV_APPORTEUR.AP_CN_CDCE(+)=FPALLD.DET_CTR_COURANT.TIERS_APPORTEUR )
                AND     (
                                REF_INFOS_PDV_APPORTEUR.AP_OD_FLGFINMOIS(+) = 1 )
                AND     FPALLD.DET_CTR_COURANT.CD_SOURCE IN ( 'EKIP' )
                AND     FPALLD.DET_CTR_COURANT.TIERS_APPORTEUR IS NOT NULL
                AND     USERR.GROUP_TYPE(+)                              = 'USER_ROLE'
                AND     USERR.CODE(+)                                    = 'FOUR'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF                   = REF_NO
                AND     FPALLD.DET_CTR_COURANT.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_EKIP', '## ALIM_STAKEHOLDERS_EKIP ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTSTAKEHOLDERS
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        NUMBER_BCU            ,
                                        REF_PERSON            ,
                                        USER_ROLE_ID          ,
                                        SIREN                 ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        CODE_ROLE             ,
                                        RRDI                  ,
                                        TEL_CONTACT           ,
                                        MAIL_CLIENT           ,
                                        VOIE_NO               ,
                                        RESID_LIB_1           ,
                                        POSTAL_CD_1           ,
                                        VILLE_NOM_ADR         ,
                                        NOM_RAISON_SOCIALE    ,
                                        PRENOM                ,
                                        ADRESSE_FACTURATION   ,
                                        CDPOSTAL_ADR_FACTURE  ,
                                        VILLE_ADR_FACTURE     ,
                                        ADRESSE_POSTALE       ,
                                        CDPOSTAL_ADR_POSTALE  ,
                                        VILLE_ADR_POSTALE
                                )
                                VALUES
                                (
                                        FPAQS_DS_STAKEHOLDERS_ID.NEXTVAL,
                                        REC.CONTRACT_ID                 ,
                                        REC.NUMBER_BCU                  ,
                                        REC.REF_PERSON                  ,
                                        REC.USER_ROLE_ID                ,
                                        REC.SIREN                       ,
                                        REC.AUDIT_LAST_UPDATE_DATE      ,
                                        REC.AUDIT_LAST_UPDATE_USER      ,
                                        REC.CODE_ROLE                   ,
                                        REC.RRDI                        ,
                                        REC.TEL_CONTACT                 ,
                                        REC.MAIL_CLIENT                 ,
                                        REC.VOIE_NO                     ,
                                        REC.RESID_LIB_1                 ,
                                        REC.POSTAL_CD_1                 ,
                                        REC.VILLE_NOM_ADR               ,
                                        REC.NOM_LIB                     ,
                                        REC.PRENOM_LIB                  ,
                                        REC.ADRESSE_FACTURATION         ,
                                        REC.CDPOSTAL_ADR_FACTURE        ,
                                        REC.VILLE_ADR_FACTURE           ,
                                        REC.ADRESSE_POSTALE             ,
                                        REC.CDPOSTAL_ADR_POSTALE        ,
                                        REC.VILLE_ADR_POSTALE
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSTAKEHOLDERS
                        SET
                                NUMBER_BCU             = REC.NUMBER_BCU            ,
                                REF_PERSON             = REC.REF_PERSON            ,
                                USER_ROLE_ID           = REC.USER_ROLE_ID          ,
                                SIREN                  = REC.SIREN                 ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                RRDI                   = REC.RRDI                  ,
                                TEL_CONTACT            = REC.TEL_CONTACT           ,
                                MAIL_CLIENT            = REC.MAIL_CLIENT           ,
                                VOIE_NO                = REC.VOIE_NO               ,
                                RESID_LIB_1            = REC.RESID_LIB_1           ,
                                POSTAL_CD_1            = REC.POSTAL_CD_1           ,
                                VILLE_NOM_ADR          = REC.VILLE_NOM_ADR         ,
                                NOM_RAISON_SOCIALE     = REC.NOM_LIB               ,
                                PRENOM                 = REC.PRENOM_LIB            ,
                                ADRESSE_FACTURATION    = REC.ADRESSE_FACTURATION   ,
                                CDPOSTAL_ADR_FACTURE   = REC.CDPOSTAL_ADR_FACTURE  ,
                                VILLE_ADR_FACTURE      = REC.VILLE_ADR_FACTURE     ,
                                ADRESSE_POSTALE        = REC.ADRESSE_POSTALE       ,
                                CDPOSTAL_ADR_POSTALE   = REC.CDPOSTAL_ADR_POSTALE  ,
                                VILLE_ADR_POSTALE      = REC.VILLE_ADR_POSTALE
                        WHERE
                                CONTRACT_ID = REC.CONTRACT_ID
                        AND     CODE_ROLE   = REC.CODE_ROLE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_EKIP', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_EKIP', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_EKIP', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_EKIP', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_EKIP', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_STAKEHOLDERS_EKIP;

FUNCTION ALIM_CTR_MILES (NOMLOG       VARCHAR2,
                         P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        V_MT_HT_PRESTATION NUMBER(18,3) :=0;
        V_CONTRACT_ID NUMBER(20);
        
        CURSOR CUR IS
                SELECT
                        NULL                                                                                                        AS PARENT_ID                     ,
                        CTC.REF_NO                                                                                                  AS BACKOFFICE_CURRENT_EXT_REF    ,
                        BACK_OFF.ID                                                                                                 AS BACKOFFICE_ID                 ,
                        PROD_TYP.ID                                                                                                 AS PRODUCT_TYPE_ID               ,
                        PROD_SUBTYP.ID                                                                                              AS PRODUCT_SUBTYPE_ID            ,
                        C.ID                                                                                                        AS CONTRACT_STATE_ID             ,
                        CTC.STATUT_AFF_CD                                                                                           AS ORIGIN_STATUS                 ,
                        CTC.POS_GES_DAT                                                                                             AS STATE_CHANGE_DATE             ,
                        NETWORK.ID                                                                                                  AS NETWORK_ID                    ,
                        CTC.CTX_AFF_IND                                                                                             AS ACCOUNTING_STATUS             ,
                        'EUR'                                                                                                       AS CURRENCY                      ,
                        'FR'                                                                                                        AS COUNTRY_CODE                  ,
                        GPA.CCTR_DATE_SIGNATURE                                                                                     AS SIGNATURE_DATE                ,
                        TDE.DE_DE_FLGSIGNELEC                                                                                       AS ELECTRONIC_SIGNATURE          ,
                        CTC.ENTREE_CA_DAT                                                                                           AS ACTIVATION_DATE               ,
                        NVL(CTI_CR_TOT_DUR, CTC.CR_TOT_DUR)                                                                         AS INITIAL_DURATION              ,
                        CTC.CR_TOT_DUR                                                                                              AS DURATION                      ,
                        CTC.FIN_CONT_DAT                                                                                            AS CLOSING_DATE                  ,
                        CTC.CATEG_AFF_CD                                                                                            AS CATEGORY                      ,
                        CTC.AGENCE_CD                                                                                               AS AGENCY                        ,
                        ADD_MONTHS(CTC.FIN_CONT_DAT, 120)                                                                           AS PURGE_DATE                    ,
                        NULL                                                                                                        AS BALLOON_AMOUNT                ,
                        NULL                                                                                                        AS RECOVERY_LEVEL_ID             ,
                        ELT.CAT_VEH_HT_MT                                                                                           AS AMOUNT                        ,
                        GPA.CCTR_DATE_DEBUT_CONTRAT                                                                                 AS START_DATE                    ,
                        GPA.CCTR_MT_AIDE_ETAT_HT + GPA.CCTR_AIDE_CONSTRUCTEUR_HT + GPA.CCTR_AIDE_PROTOCOLE_HT + GPA.CCTR_AIDE_SF_HT AS CONTRIBUTION                  ,
                        CTC.IMP_COURS_NB                                                                                            AS NB_CURRENT_UNPAID             ,
                        GPA.CCTR_CAP_RESTANT_DU_COMP                                                                                AS REMAINING_CAPITAL             ,
                        NULL                                                                                                        AS SECURITIZED                   ,
                        CTC.ORIG_FIN_DAT                                                                                            AS FIRST_DUE_DATE                ,
                        ELT.CONT_TX                                                                                                 AS NOMINAL_RATE                  ,
                        INI.FIN_TTC_MT                                                                                              AS INITIAL_AMOUNT                ,
                        ELT.PX_ACQUI_MT                                                                                             AS FUNDED_ASSET_AMOUNT           ,
                        REPLACE(ELT.QUANT_ECH_VAL, 'FIN', '30')                                                                     AS DAY_OF_MONTH                  ,
                        NULL                                                                                                        AS LAST_DUE_DATE                 ,
                        ELT.SERIE_NO                                                                                                AS VIN                           ,
                        ELT.LIV_VEH_DAT                                                                                             AS DELIVERY_DATE                 ,
                        CTC.KILOMETRAGE                                                                                             AS AGREED_MILEAGE                ,
                        DECODE(ELT.USAGE_PROF_CD, 'PRO', '1', '0')                                                                  AS PROFESSIONAL_USE              ,
                        ELT.DG_MT                                                                                                   AS DEPOSIT_AMOUNT                ,
                        CTC.FIN_CONT_DAT                                                                                            AS EXPECTED_RETURN_DATE          ,
                        CTC.REEL_VP_OPT_TTC                                                                                         AS REPURCHASE_AMOUNT             ,
                        CTC.REEL_VP_OPT_HT                                                                                          AS REPURCHASE_AMOUNT_HT          ,
                        NULL                                                                                                        AS BACKOFFICE_PARENT_EXTERNAL_REF,
                        P_DATE_TRAIT                                                                                                AS LAST_UPDATE_DATE              ,
                        'MILES'                                                                                                     AS BACKOFFICE_CODE               ,
                        DECODE(PRODUIT_CD, 'D', 'LLD', 'T', 'LLD', 'F', 'LLD', 'G', 'LLD', '#', 'CEM', PRODUIT_CD)                  AS PRODUCT_CODE                  ,
                        CTC.CATEG_AFF_CD                                                                                            AS SUB_PRODUCT_CODE              ,
                        B.TRANSCO_SALESFORCE                                                                                        AS STATE_CODE                    ,
                        CTC.RES_APP_CD                                                                                              AS NETWORK_CODE                  ,
                        NULL                                                                                                        AS RECOVER_CODE                  ,
                        CCTR_DATE_ECH_M_GPA                                                                                         AS NEXT_DUE_DATE                 ,
                        CCTR_MT_CRD_MPLUS2_HT - CCTR_MT_CRD_MPLUS1_HT                                                               AS NEXT_RENT_AMOUNT              ,
                        REPLACE(CCTR_NB_ECH_PLEINE_REST, CHR(13), '')                                                               AS NB_REMAIN_RENT                ,
                        NULL                                                                                                        AS LAST_DUE_AMOUNT_HT            ,
                        NULL                                                                                                        AS NEXT_RENT_AMOUNT_HT           ,
                        NVL(CTC.LOYER_FIN_HT, 0)                                                                                    AS LOYER_FIN_HT                  ,
                        0/*NVL(ELT.MT_HT_FRAIS_DIV, 0)*/  /*+ NVL(MAC.MT_HT_FRE, 0)*/                                                            AS MT_AUTRE_MONTANT_HT           ,
                        0/*NVL(ELT.MT_TTC_FRAIS_DIV, 0)*/ /*+ NVL(MAC.MT_TTC_FRE, 0)*/                                                           AS MT_AUTRE_MONTANT_TTC,
                        ELT.DATE_RESTITUTION                                                    AS RESTITUTION_DATE,
                        CASE WHEN GPA.CCTR_REF_INT_PDV_REPR IN ('630700', '55087') THEN 'Y' ELSE 'N' END AS ISBUYBACKMAKE,
                        TDE.DE_DE_NUDEMAND                  AS proposalRef,
                        CTC.REF_NO_INTERNE            AS contract_ref_gp,
                        CTC.FLAG_LEASECO             AS IS_LEASECO,
                        NULL                         AS CONTRACTUAL_MILEAGE,
                        2500                         AS FRANCHISE_MILEAGE,
                        0                            AS FRANCHISE_CUSTOMER_MILEAGE,
                        TIE.MAIL_CLIENT              AS EMAIL,
                        ELT.VAL_MIN_DUR              AS COEF_VARIATION,
                        ELT.VAL_MAX_DUR              AS COEF_EXTENSION,
                        'UNDER'                      AS TYPE_1,
                        ELT.KM_INF_P2_NB             AS MIN_THRESHOLD_1,
                        ELT.KM_INF_P1_NB-1           AS MAX_THRESHOLD_1,
                        ELT.MT_EXCEDENT_SIM_B1       AS FINANCIAL_KM_COST_1,
                        ELT.ER_CL_INF_P1_MT          AS RESIDUAL_VALUE_KM_COST_1,
                        'UNDER'                      AS TYPE_2,
                        ELT.KM_INF_P1_NB             AS MIN_THRESHOLD_2,
                        CTC.KILOMETRAGE-1            AS MAX_THRESHOLD_2,
                        ELT.MT_EXCEDENT_SIM_B2       AS FINANCIAL_KM_COST_2,
                        ELT.ER_CL_INF_P2_MT          AS RESIDUAL_VALUE_KM_COST_2,
                        'EXCESS'                     AS TYPE_3,
                        CTC.KILOMETRAGE              AS MIN_THRESHOLD_3,
                        ELT.KM_SUP_P1_NB             AS MAX_THRESHOLD_3,
                        ELT.MT_EXCEDENT_SIM_B3       AS FINANCIAL_KM_COST_3,
                        ELT.ER_CL_SUP_P1_MT          AS RESIDUAL_VALUE_KM_COST_3,
                        'EXCESS'                     AS TYPE_4,
                        ELT.KM_SUP_P1_NB+1           AS MIN_THRESHOLD_4,
                        ELT.KM_SUP_P2_NB             AS MAX_THRESHOLD_4,
                        ELT.MT_EXCEDENT_SIM_B4       AS FINANCIAL_KM_COST_4,
                        ELT.ER_CL_SUP_P2_MT          AS RESIDUAL_VALUE_KM_COST_4,
                        'UNDER'                      AS TYPE_5,
                        CTC.TPLUS_REDUC_B2           AS MIN_THRESHOLD_5,
                        CTC.TPLUS_REDUC_B1           AS MAX_THRESHOLD_5,
                        ELT.PRC_PALSIM_B1            AS FINANCIAL_DURATION_COST_5,
                        'UNDER'                      AS TYPE_6,
                        CTC.TPLUS_REDUC_B1           AS MIN_THRESHOLD_6,
                        CTC.CR_TOT_DUR               AS MAX_THRESHOLD_6,
                        ELT.PRC_PALSIM_B2            AS FINANCIAL_DURATION_COST_6,
                        'EXCESS'                     AS TYPE_7,
                        CTC.CR_TOT_DUR+1             AS MIN_THRESHOLD_7,
                        CTC.TPLUS_PROLONG_B1         AS MAX_THRESHOLD_7,
                        ELT.PRC_PALSIM_B3            AS FINANCIAL_DURATION_COST_7,
                        'UNDER'                      AS TYPE_8,
                        CTC.TPLUS_PROLONG_B1+1       AS MIN_THRESHOLD_8,
                        CTC.TPLUS_PROLONG_B2         AS MAX_THRESHOLD_8,
                        ELT.PRC_PALSIM_B4            AS FINANCIAL_DURATION_COST_8
                FROM
                        FPALLD.FPAQTCTC              CTC        ,
                        FPALLD.FPAQTCTI              CTI        ,
                        FPALLD.FPAQTELT              ELT        ,
                        FPALLD.FPAQTTIE              TIE,
                        FPALLD.FPAQTELT              INI        ,
                        FPA.FPAQTDE                  TDE        ,
                        FPALLD.FPAQTCCTR             GPA        ,
                      --  FPAF2M.FPAQT_MAC             MAC        ,
                        fpads.fpaqtnom               BACK_OFF   ,
                        FPADS.FPAQTNOM               PROD_TYP   ,
                        FPADS.FPAQTNOM               PROD_SUBTYP,
                        FPADS.FPAQTNOM               NETWORK    ,
                        fpads.fpads_qt_param_t_s_a_d b          ,
                        fpads.fpaqtnom               c
                WHERE
                        CTC.REF_NO                  = ELT.REF_NO
                AND     CTC.REF_NO                  = INI.REF_NO
                AND     CTC.ID_CLIE                 = TIE.ID_TIERS
                AND     ELT.DER_ELEMENT             = 'O'
                AND     INI.ELEMENT_NO              = 1
                AND     CTC.CD_SOURCE               = 'LEASEBASE'
                AND     TDE.DE_DE_NUMCONT(+)        = CTC.REF_NO
                AND     GPA.CCTR_REF_CONTRAT_INT(+) = CTC.REF_NO
                AND     CTI.CTI_REF_NO_INTERNE(+)   = CTC.REF_NO_INTERNE
               -- AND     MAC.NO_CONTRAT(+)           = CTC.REF_NO
               -- AND     MAC.FLAG_FRE(+)             = 'O'
                AND     BACK_OFF.GROUP_TYPE         = 'BACKOFFICE'
                AND     BACK_OFF.CODE               = DECODE(CTC.CD_SOURCE, 'LEASEBASE', 'AMSI')
                AND     PROD_TYP.GROUP_TYPE         = 'PRODUCT_TYPE'
                AND     PROD_TYP.CODE               = DECODE(PRODUIT_CD, 'D', 'LLD', 'T', 'LLD', 'F', 'LLD', 'G', 'LLD', '#', 'CEM', PRODUIT_CD)
                AND     PROD_SUBTYP.GROUP_TYPE(+)   = 'PRODUCT_SUBTYPE'
                AND     PROD_SUBTYP.CODE(+)         = DECODE(CTC.CATEG_AFF_CD, 'F', 'FIXE', 'T', 'TEMPLU', 'D', 'DISLIB', NULL)
                AND     NETWORK.GROUP_TYPE          = 'CD_NETWORK'
                AND     NETWORK.CODE                = DECODE(CTC.RES_APP_CD, 'C', 'CIT', 'P', 'PEU', 'S', 'DS', CTC.RES_APP_CD)
                AND     GPA.CCTR_CD_STAT_GEST_DOSS  = b.cts_code_statut_back_office(+)
                AND     c.group_type(+)             = 'CONTRACT_STATE'
                AND     c.code(+)                   = b.transco_salesforce
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_MILES', '## ALIM_CTR_MILES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                
                BEGIN
                     SELECT SUM(DECODE(SUBSTR(e.pol_prest_no, 1, 2), 'L2', 0, 'L3', 0, nvl(e.prest_mt_ht, 0)))
                            INTO V_MT_HT_PRESTATION
                            FROM FPALLD.FPAQTPRS e
                            WHERE NVL(e.fin_fac_prs_dat_1, e.fin_fac_prs_dat) > P_DATE_TRAIT -- AJOUT CONDITION CAR MT PRESTATION RENSEIGNEE ET PRESTATION RESILIEE
                            AND e.ref_no = REC.BACKOFFICE_CURRENT_EXT_REF;
                EXCEPTION WHEN OTHERS THEN
                          V_MT_HT_PRESTATION := 0;
                END;
                
                
                BEGIN
                        INSERT INTO
                                FPADS_QTCONTRACT
                                (
                                        ID                        ,
                                        PARENT_ID                 ,
                                        BACKOFFICE_CURRENT_EXT_REF,
                                        BACKOFFICE_ID             ,
                                        PRODUCT_TYPE_ID           ,
                                        PRODUCT_SUBTYPE_ID        ,
                                        CONTRACT_STATE_ID         ,
                                        ORIGIN_STATUS             ,
                                        STATE_CHANGE_DATE         ,
                                        NETWORK_ID                ,
                                        ACCOUNTING_STATUS         ,
                                        CURRENCY                  ,
                                        COUNTRY_CODE              ,
                                        SIGNATURE_DATE            ,
                                        ELECTRONIC_SIGNATURE      ,
                                        ACTIVATION_DATE           ,
                                        INITIAL_DURATION          ,
                                        DURATION                  ,
                                        CLOSING_DATE              ,
                                        CATEGORY                  ,
                                        AGENCY                    ,
                                        PURGE_DATE                ,
                                        BALLOON_AMOUNT            ,
                                        NEXT_DUE_DATE             ,
                                        NEXT_RENT_AMOUNT          ,
                                        NB_REMAIN_RENT            ,
                                        LAST_DUE_AMOUNT_HT        ,
                                        NEXT_RENT_AMOUNT_HT       ,
                                        AMOUNT                    ,
                                        START_DATE                ,
                                        CONTRIBUTION              ,
                                        RECOVERY_LEVEL_ID         ,
                                        NB_CURRENT_UNPAID         ,
                                        REMAINING_CAPITAL         ,
                                        SECURITIZED               ,
                                        FIRST_DUE_DATE            ,
                                        NOMINAL_RATE              ,
                                        INITIAL_AMOUNT            ,
                                        FUNDED_ASSET_AMOUNT       ,
                                        DAY_OF_MONTH              ,
                                        LAST_DUE_DATE             ,
                                        VIN                       ,
                                        DELIVERY_DATE             ,
                                        AGREED_MILEAGE            ,
                                        PROFESSIONAL_USE          ,
                                        DEPOSIT_AMOUNT            ,
                                        EXPECTED_RETURN_DATE      ,
                                        REPURCHASE_AMOUNT         ,
                                        REPURCHASE_AMOUNT_HT      ,
                                        BACKOFFICE_PARENT_EXT_REF ,
                                        LAST_UPDATE_DATE          ,
                                        BACKOFFICE_CODE           ,
                                        PRODUCT_CODE              ,
                                        SUB_PRODUCT_CODE          ,
                                        STATE_CODE                ,
                                        NETWORK_CODE              ,
                                        RECOVER_CODE              ,
                                        LOYER_FIN_HT              ,
                                        MT_HT_PRESTATION          ,
                                        MT_LOYER_TOT_HT           ,
                                        MT_AUTRE_MONTANT_HT       ,
                                        MT_AUTRE_MONTANT_TTC      ,
                                        RESTITUTION_DATE          ,
                                        ISBUYBACKMAKE             ,
                                        proposalRef               ,
                                        contract_ref_gp           ,
                                        IS_LEASECO                ,
                                        CONTRACTUAL_MILEAGE       ,
                                        FRANCHISE_MILEAGE         ,
                                        FRANCHISE_CUSTOMER_MILEAGE,
                                        EMAIL                     ,
                                        COEF_VARIATION            ,
                                        COEF_EXTENSION            ,
                                        TYPE_1                    ,
                                        MIN_THRESHOLD_1           ,
                                        MAX_THRESHOLD_1           ,
                                        FINANCIAL_KM_COST_1       ,
                                        RESIDUAL_VALUE_KM_COST_1  ,
                                        TYPE_2                    ,
                                        MIN_THRESHOLD_2           ,
                                        MAX_THRESHOLD_2           ,
                                        FINANCIAL_KM_COST_2       ,
                                        RESIDUAL_VALUE_KM_COST_2  ,
                                        TYPE_3                    ,
                                        MIN_THRESHOLD_3           ,
                                        MAX_THRESHOLD_3           ,
                                        FINANCIAL_KM_COST_3       ,
                                        RESIDUAL_VALUE_KM_COST_3  ,
                                        TYPE_4                    ,
                                        MIN_THRESHOLD_4           ,
                                        MAX_THRESHOLD_4           ,
                                        FINANCIAL_KM_COST_4       ,
                                        RESIDUAL_VALUE_KM_COST_4  ,
                                        TYPE_5                    ,
                                        MIN_THRESHOLD_5           ,
                                        MAX_THRESHOLD_5           ,
                                        FINANCIAL_DURATION_COST_5 ,
                                        TYPE_6                      ,
                                        MIN_THRESHOLD_6             ,
                                        MAX_THRESHOLD_6             ,
                                        FINANCIAL_DURATION_COST_6   ,
                                        TYPE_7                      ,
                                        MIN_THRESHOLD_7             ,
                                        MAX_THRESHOLD_7             ,
                                        FINANCIAL_DURATION_COST_7   ,
                                        TYPE_8                      ,
                                        MIN_THRESHOLD_8             ,
                                        MAX_THRESHOLD_8             ,
                                        FINANCIAL_DURATION_COST_8   ,
                                        CONTRACT_MILEAGE_PER_YEAR
                                )
                                VALUES
                                (
                                        FPAQS_DS_CONTRACT_ID.NEXTVAL      ,
                                        REC.PARENT_ID                     ,
                                        REC.BACKOFFICE_CURRENT_EXT_REF    ,
                                        REC.BACKOFFICE_ID                 ,
                                        REC.PRODUCT_TYPE_ID               ,
                                        REC.PRODUCT_SUBTYPE_ID            ,
                                        REC.CONTRACT_STATE_ID             ,
                                        REC.ORIGIN_STATUS                 ,
                                        REC.STATE_CHANGE_DATE             ,
                                        REC.NETWORK_ID                    ,
                                        REC.ACCOUNTING_STATUS             ,
                                        REC.CURRENCY                      ,
                                        REC.COUNTRY_CODE                  ,
                                        REC.SIGNATURE_DATE                ,
                                        REC.ELECTRONIC_SIGNATURE          ,
                                        REC.ACTIVATION_DATE               ,
                                        REC.INITIAL_DURATION              ,
                                        REC.DURATION                      ,
                                        REC.CLOSING_DATE                  ,
                                        REC.CATEGORY                      ,
                                        REC.AGENCY                        ,
                                        REC.PURGE_DATE                    ,
                                        REC.BALLOON_AMOUNT                ,
                                        REC.NEXT_DUE_DATE                 ,
                                        REC.NEXT_RENT_AMOUNT              ,
                                        REC.NB_REMAIN_RENT                ,
                                        REC.LAST_DUE_AMOUNT_HT            ,
                                        REC.NEXT_RENT_AMOUNT_HT           ,
                                        REC.AMOUNT                        ,
                                        REC.START_DATE                    ,
                                        REC.CONTRIBUTION                  ,
                                        REC.RECOVERY_LEVEL_ID             ,
                                        REC.NB_CURRENT_UNPAID             ,
                                        REC.REMAINING_CAPITAL             ,
                                        REC.SECURITIZED                   ,
                                        REC.FIRST_DUE_DATE                ,
                                        REC.NOMINAL_RATE                  ,
                                        REC.INITIAL_AMOUNT                ,
                                        REC.FUNDED_ASSET_AMOUNT           ,
                                        REC.DAY_OF_MONTH                  ,
                                        REC.LAST_DUE_DATE                 ,
                                        REC.VIN                           ,
                                        REC.DELIVERY_DATE                 ,
                                        REC.AGREED_MILEAGE                ,
                                        REC.PROFESSIONAL_USE              ,
                                        REC.DEPOSIT_AMOUNT                ,
                                        REC.EXPECTED_RETURN_DATE          ,
                                        REC.REPURCHASE_AMOUNT             ,
                                        REC.REPURCHASE_AMOUNT_HT          ,
                                        REC.BACKOFFICE_PARENT_EXTERNAL_REF,
                                        REC.LAST_UPDATE_DATE              ,
                                        REC.BACKOFFICE_CODE               ,
                                        REC.PRODUCT_CODE                  ,
                                        REC.SUB_PRODUCT_CODE              ,
                                        REC.STATE_CODE                    ,
                                        REC.NETWORK_CODE                  ,
                                        REC.RECOVER_CODE                  ,
                                        REC.LOYER_FIN_HT                  ,
                                        NVL(V_MT_HT_PRESTATION, 0)        ,
                                        REC.LOYER_FIN_HT + NVL(V_MT_HT_PRESTATION, 0),
                                        REC.MT_AUTRE_MONTANT_HT           ,
                                        REC.MT_AUTRE_MONTANT_TTC          ,
                                        REC.RESTITUTION_DATE              ,
                                        REC.ISBUYBACKMAKE                 ,
                                        REC.proposalRef                   ,
                                        REC.contract_ref_gp               ,
                                        REC.IS_LEASECO                    ,
                                        REC.CONTRACTUAL_MILEAGE           ,
                                        REC.FRANCHISE_MILEAGE             ,
                                        REC.FRANCHISE_CUSTOMER_MILEAGE    ,
                                        REC.EMAIL                         ,
                                        REC.COEF_VARIATION            ,
                                        REC.COEF_EXTENSION            ,
                                        REC.TYPE_1                    ,
                                        REC.MIN_THRESHOLD_1           ,
                                        REC.MAX_THRESHOLD_1           ,
                                        REC.FINANCIAL_KM_COST_1       ,
                                        REC.RESIDUAL_VALUE_KM_COST_1  ,
                                        REC.TYPE_2                    ,
                                        REC.MIN_THRESHOLD_2           ,
                                        REC.MAX_THRESHOLD_2           ,
                                        REC.FINANCIAL_KM_COST_2       ,
                                        REC.RESIDUAL_VALUE_KM_COST_2  ,
                                        REC.TYPE_3                    ,
                                        REC.MIN_THRESHOLD_3           ,
                                        REC.MAX_THRESHOLD_3           ,
                                        REC.FINANCIAL_KM_COST_3       ,
                                        REC.RESIDUAL_VALUE_KM_COST_3  ,
                                        REC.TYPE_4                    ,
                                        REC.MIN_THRESHOLD_4           ,
                                        REC.MAX_THRESHOLD_4           ,
                                        REC.FINANCIAL_KM_COST_4       ,
                                        REC.RESIDUAL_VALUE_KM_COST_4  ,
                                        REC.TYPE_5                    ,
                                        REC.MIN_THRESHOLD_5           ,
                                        REC.MAX_THRESHOLD_5           ,
                                        REC.FINANCIAL_DURATION_COST_5 ,
                                        REC.TYPE_6                      ,
                                        REC.MIN_THRESHOLD_6             ,
                                        REC.MAX_THRESHOLD_6             ,
                                        REC.FINANCIAL_DURATION_COST_6   ,
                                        REC.TYPE_7                      ,
                                        REC.MIN_THRESHOLD_7             ,
                                        REC.MAX_THRESHOLD_7             ,
                                        REC.FINANCIAL_DURATION_COST_7   ,
                                        REC.TYPE_8                      ,
                                        REC.MIN_THRESHOLD_8             ,
                                        REC.MAX_THRESHOLD_8             ,
                                        REC.FINANCIAL_DURATION_COST_8   ,
                                        CASE WHEN NVL(REC.DURATION, 0) = 0 THEN 0 ELSE (REC.AGREED_MILEAGE / REC.DURATION) * 12 END
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTCONTRACT
                        SET
                                PARENT_ID                 = REC.PARENT_ID                     ,
                                BACKOFFICE_ID             = REC.BACKOFFICE_ID                 ,
                                PRODUCT_TYPE_ID           = REC.PRODUCT_TYPE_ID               ,
                                PRODUCT_SUBTYPE_ID        = REC.PRODUCT_SUBTYPE_ID            ,
                                CONTRACT_STATE_ID         = REC.CONTRACT_STATE_ID             ,
                                ORIGIN_STATUS             = REC.ORIGIN_STATUS                 ,
                                STATE_CHANGE_DATE         = REC.STATE_CHANGE_DATE             ,
                                NETWORK_ID                = REC.NETWORK_ID                    ,
                                ACCOUNTING_STATUS         = REC.ACCOUNTING_STATUS             ,
                                CURRENCY                  = REC.CURRENCY                      ,
                                COUNTRY_CODE              = REC.COUNTRY_CODE                  ,
                                SIGNATURE_DATE            = REC.SIGNATURE_DATE                ,
                                ELECTRONIC_SIGNATURE      = REC.ELECTRONIC_SIGNATURE          ,
                                ACTIVATION_DATE           = REC.ACTIVATION_DATE               ,
                                INITIAL_DURATION          = REC.INITIAL_DURATION              ,
                                DURATION                  = REC.DURATION                      ,
                                CLOSING_DATE              = REC.CLOSING_DATE                  ,
                                CATEGORY                  = REC.CATEGORY                      ,
                                AGENCY                    = REC.AGENCY                        ,
                                PURGE_DATE                = REC.PURGE_DATE                    ,
                                BALLOON_AMOUNT            = REC.BALLOON_AMOUNT                ,
                                NEXT_DUE_DATE             = REC.NEXT_DUE_DATE                 ,
                                NEXT_RENT_AMOUNT          = REC.NEXT_RENT_AMOUNT              ,
                                NB_REMAIN_RENT            = REC.NB_REMAIN_RENT                ,
                                LAST_DUE_AMOUNT_HT        = REC.LAST_DUE_AMOUNT_HT            ,
                                NEXT_RENT_AMOUNT_HT       = REC.NEXT_RENT_AMOUNT_HT           ,
                                AMOUNT                    = REC.AMOUNT                        ,
                                START_DATE                = REC.START_DATE                    ,
                                CONTRIBUTION              = REC.CONTRIBUTION                  ,
                                RECOVERY_LEVEL_ID         = REC.RECOVERY_LEVEL_ID             ,
                                NB_CURRENT_UNPAID         = REC.NB_CURRENT_UNPAID             ,
                                REMAINING_CAPITAL         = REC.REMAINING_CAPITAL             ,
                                SECURITIZED               = REC.SECURITIZED                   ,
                                FIRST_DUE_DATE            = REC.FIRST_DUE_DATE                ,
                                NOMINAL_RATE              = REC.NOMINAL_RATE                  ,
                                INITIAL_AMOUNT            = REC.INITIAL_AMOUNT                ,
                                FUNDED_ASSET_AMOUNT       = REC.FUNDED_ASSET_AMOUNT           ,
                                DAY_OF_MONTH              = REC.DAY_OF_MONTH                  ,
                                LAST_DUE_DATE             = REC.LAST_DUE_DATE                 ,
                                VIN                       = REC.VIN                           ,
                                DELIVERY_DATE             = REC.DELIVERY_DATE                 ,
                                AGREED_MILEAGE            = REC.AGREED_MILEAGE                ,
                                PROFESSIONAL_USE          = REC.PROFESSIONAL_USE              ,
                                DEPOSIT_AMOUNT            = REC.DEPOSIT_AMOUNT                ,
                                EXPECTED_RETURN_DATE      = REC.EXPECTED_RETURN_DATE          ,
                                REPURCHASE_AMOUNT         = REC.REPURCHASE_AMOUNT             ,
                                REPURCHASE_AMOUNT_HT      = REC.REPURCHASE_AMOUNT_HT          ,
                                BACKOFFICE_PARENT_EXT_REF = REC.BACKOFFICE_PARENT_EXTERNAL_REF,
                                LAST_UPDATE_DATE          = REC.LAST_UPDATE_DATE              ,
                                BACKOFFICE_CODE           = REC.BACKOFFICE_CODE               ,
                                PRODUCT_CODE              = REC.PRODUCT_CODE                  ,
                                SUB_PRODUCT_CODE          = REC.SUB_PRODUCT_CODE              ,
                                STATE_CODE                = REC.STATE_CODE                    ,
                                NETWORK_CODE              = REC.NETWORK_CODE                  ,
                                RECOVER_CODE              = REC.RECOVER_CODE                  ,
                                LOYER_FIN_HT              = REC.LOYER_FIN_HT                  ,
                                MT_HT_PRESTATION          = NVL(V_MT_HT_PRESTATION, 0)        ,
                                MT_LOYER_TOT_HT           = REC.LOYER_FIN_HT + NVL(V_MT_HT_PRESTATION, 0),
                                MT_AUTRE_MONTANT_HT       = REC.MT_AUTRE_MONTANT_HT           ,
                                MT_AUTRE_MONTANT_TTC      = REC.MT_AUTRE_MONTANT_TTC          ,
                                RESTITUTION_DATE          = REC.RESTITUTION_DATE              ,
                                ISBUYBACKMAKE             = REC.ISBUYBACKMAKE                 ,
                                proposalRef               = REC.proposalRef                   ,
                                contract_ref_gp           = REC.contract_ref_gp               ,
                                IS_LEASECO                = REC.IS_LEASECO                    ,
                                CONTRACTUAL_MILEAGE       = REC.CONTRACTUAL_MILEAGE           ,
                                FRANCHISE_MILEAGE         = REC.FRANCHISE_MILEAGE             ,
                                FRANCHISE_CUSTOMER_MILEAGE = REC.FRANCHISE_CUSTOMER_MILEAGE   ,
                                EMAIL                      = REC.EMAIL                        ,
                                COEF_VARIATION             = REC.COEF_VARIATION               ,
                                COEF_EXTENSION             = REC.COEF_EXTENSION               ,
                                TYPE_1                     = REC.TYPE_1                       ,
                                MIN_THRESHOLD_1            = REC.MIN_THRESHOLD_1              ,
                                MAX_THRESHOLD_1            = REC.MAX_THRESHOLD_1              ,
                                FINANCIAL_KM_COST_1        = REC.FINANCIAL_KM_COST_1          ,
                                RESIDUAL_VALUE_KM_COST_1   = REC.RESIDUAL_VALUE_KM_COST_1     ,
                                TYPE_2                     = REC.TYPE_2                       ,
                                MIN_THRESHOLD_2            = REC.MIN_THRESHOLD_2              ,
                                MAX_THRESHOLD_2            = REC.MAX_THRESHOLD_2              ,
                                FINANCIAL_KM_COST_2        = REC.FINANCIAL_KM_COST_2          ,
                                RESIDUAL_VALUE_KM_COST_2   = REC.RESIDUAL_VALUE_KM_COST_2     ,
                                TYPE_3                     = REC.TYPE_3                       ,
                                MIN_THRESHOLD_3            = REC.MIN_THRESHOLD_3              ,
                                MAX_THRESHOLD_3            = REC.MAX_THRESHOLD_3              ,
                                FINANCIAL_KM_COST_3        = REC.FINANCIAL_KM_COST_3          ,
                                RESIDUAL_VALUE_KM_COST_3   = REC.RESIDUAL_VALUE_KM_COST_3     ,
                                TYPE_4                     = REC.TYPE_4                       ,
                                MIN_THRESHOLD_4            = REC.MIN_THRESHOLD_4              ,
                                MAX_THRESHOLD_4            = REC.MAX_THRESHOLD_4              ,
                                FINANCIAL_KM_COST_4        = REC.FINANCIAL_KM_COST_4          ,
                                RESIDUAL_VALUE_KM_COST_4   = REC.RESIDUAL_VALUE_KM_COST_4     ,
                                TYPE_5                     = REC.TYPE_5                       ,
                                MIN_THRESHOLD_5            = REC.MIN_THRESHOLD_5              ,
                                MAX_THRESHOLD_5            = REC.MAX_THRESHOLD_5              ,
                                FINANCIAL_DURATION_COST_5  = REC.FINANCIAL_DURATION_COST_5    ,
                                TYPE_6                      = REC.TYPE_6                      ,
                                MIN_THRESHOLD_6             = REC.MIN_THRESHOLD_6             ,
                                MAX_THRESHOLD_6             = REC.MAX_THRESHOLD_6             ,
                                FINANCIAL_DURATION_COST_6   = REC.FINANCIAL_DURATION_COST_6   ,
                                TYPE_7                      = REC.TYPE_7                      ,
                                MIN_THRESHOLD_7             = REC.MIN_THRESHOLD_7             ,
                                MAX_THRESHOLD_7             = REC.MAX_THRESHOLD_7             ,
                                FINANCIAL_DURATION_COST_7   = REC.FINANCIAL_DURATION_COST_7   ,
                                TYPE_8                      = REC.TYPE_8                      ,
                                MIN_THRESHOLD_8             = REC.MIN_THRESHOLD_8             ,
                                MAX_THRESHOLD_8             = REC.MAX_THRESHOLD_8             ,
                                FINANCIAL_DURATION_COST_8   = REC.FINANCIAL_DURATION_COST_8   ,
                                CONTRACT_MILEAGE_PER_YEAR   = CASE WHEN NVL(REC.DURATION, 0) = 0 THEN 0 ELSE (REC.AGREED_MILEAGE / REC.DURATION) * 12 END
                        WHERE
                                BACKOFFICE_CURRENT_EXT_REF = REC.BACKOFFICE_CURRENT_EXT_REF
                        AND     BACKOFFICE_CODE            = REC.BACKOFFICE_CODE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_MILES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.BACKOFFICE_CURRENT_EXT_REF);
                       --EXIT;
                END;
             
               BEGIN
                  SELECT  CONTRACT.ID
                  INTO    V_CONTRACT_ID
                  FROM    FPADS.FPADS_QTCONTRACT CONTRACT
                  WHERE   CONTRACT.BACKOFFICE_CURRENT_EXT_REF = REC.BACKOFFICE_CURRENT_EXT_REF
                  AND     CONTRACT.BACKOFFICE_CODE            = REC.BACKOFFICE_CODE;
                EXCEPTION WHEN OTHERS THEN
                  V_CONTRACT_ID := NULL;
                END;
                
                IF V_CONTRACT_ID IS NOT NULL THEN 
                ------- GRID 1 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_1,
                                  2,
                                  REC.MIN_THRESHOLD_1,
                                  REC.MAX_THRESHOLD_1,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_1,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_1,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_1,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_1,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_1
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 1 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 2 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_2,
                                  1,
                                  REC.MIN_THRESHOLD_2,
                                  REC.MAX_THRESHOLD_2,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_2,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_2,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_2,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_2,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_2
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 2 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 3 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_3,
                                  1,
                                  REC.MIN_THRESHOLD_3,
                                  REC.MAX_THRESHOLD_3,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_3,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_3,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_3,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_3,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_3
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 3 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 4 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_4,
                                  2,
                                  REC.MIN_THRESHOLD_4,
                                  REC.MAX_THRESHOLD_4,
                                  'financialKm',
                                  REC.FINANCIAL_KM_COST_4,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_4,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_4,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_KM_COST_4,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_4
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialKm'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 4 financialKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 1 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_1,
                                  2,
                                  REC.MIN_THRESHOLD_1,
                                  REC.MAX_THRESHOLD_1,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_1,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_1,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_1,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_1,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_1
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 1 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
              
              ------- GRID 2 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_2,
                                  1,
                                  REC.MIN_THRESHOLD_2,
                                  REC.MAX_THRESHOLD_2,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_2,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_2,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_2,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_2,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_2
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 2 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                
            ------- GRID 3 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_3,
                                  1,
                                  REC.MIN_THRESHOLD_3,
                                  REC.MAX_THRESHOLD_3,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_3,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_3,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_3,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_3,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_3
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 3 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
              ------- GRID 4 kmResidualValue 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_4,
                                  2,
                                  REC.MIN_THRESHOLD_4,
                                  REC.MAX_THRESHOLD_4,
                                  'kmResidualValue',
                                  REC.RESIDUAL_VALUE_KM_COST_4,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_4,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_4,
                                  COST_AMOUNT_ET                = REC.RESIDUAL_VALUE_KM_COST_4,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_4
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'kmResidualValue'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 4 kmResidualValue  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                
            ------- GRID 1 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_5,
                                  2,
                                  REC.MIN_THRESHOLD_5,
                                  REC.MAX_THRESHOLD_5,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_5,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_5,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_5,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_5,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_5
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 1 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 2 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_6,
                                  1,
                                  REC.MIN_THRESHOLD_6,
                                  REC.MAX_THRESHOLD_6,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_6,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_6,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_6,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_6,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_6
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 2 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                ------- GRID 3 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_7,
                                  1,
                                  REC.MIN_THRESHOLD_7,
                                  REC.MAX_THRESHOLD_7,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_7,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_7,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_7,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_7,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_7
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 3 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                
            ------- GRID 4 financialDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_8,
                                  2,
                                  REC.MIN_THRESHOLD_8,
                                  REC.MAX_THRESHOLD_8,
                                  'financialDuration',
                                  REC.FINANCIAL_DURATION_COST_8,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.BACKOFFICE_CURRENT_EXT_REF,
                                  REC.BACKOFFICE_CODE,
                                  V_CONTRACT_ID,
                                  REC.LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_8,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_8,
                                  COST_AMOUNT_ET                = REC.FINANCIAL_DURATION_COST_8,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_8
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'financialDuration'
                       AND        CONTRACT_ID                   = V_CONTRACT_ID;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_EKIP', 'GRID 4 financialDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.BACKOFFICE_CURRENT_EXT_REF);
                END;
                
                END IF;
             
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_MILES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_MILES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_MILES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CTR_MILES', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_CTR_MILES;

FUNCTION ALIM_STRUCTURE_MILES (NOMLOG       VARCHAR2,
                               P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID         AS CONTRACT_ID           ,
                        NULL           AS STRUCT_TYPE_ID        ,
                        SOC_JUR_CD     AS EXT_REFERENCE_VALUE   ,
                        P_DATE_TRAIT   AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'    AS AUDIT_LAST_UPDATE_USER,
                        CTC.SOC_JUR_CD AS CODE_STRUCTURE
                FROM
                        FPALLD.FPAQTCTC        CTC,
                        FPADS.FPADS_QTCONTRACT CTR
                WHERE
                        CTR.BACKOFFICE_CURRENT_EXT_REF = CTC.REF_NO
                AND     CTC.CD_SOURCE                  = 'LEASEBASE'
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_MILES', '## ALIM_STRUCTURE_MILES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTSTRUCTURE
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        STRUCT_TYPE_ID        ,
                                        EXT_REFERENCE_VALUE   ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        CODE_STRUCTURE
                                )
                                VALUES
                                (
                                        FPAQS_DS_STAKEHOLDERS_ID.NEXTVAL,
                                        REC.CONTRACT_ID                 ,
                                        REC.STRUCT_TYPE_ID              ,
                                        REC.EXT_REFERENCE_VALUE         ,
                                        REC.AUDIT_LAST_UPDATE_DATE      ,
                                        REC.AUDIT_LAST_UPDATE_USER      ,
                                        REC.CODE_STRUCTURE
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSTRUCTURE
                        SET
                                STRUCT_TYPE_ID         = REC.STRUCT_TYPE_ID        ,
                                CODE_STRUCTURE         = REC.CODE_STRUCTURE        ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER
                        WHERE
                                CONTRACT_ID         = REC.CONTRACT_ID
                        AND     EXT_REFERENCE_VALUE = REC.EXT_REFERENCE_VALUE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        dbms_output.put_line(SQLERRM
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_MILES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_MILES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_MILES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STRUCTURE_MILES', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_STRUCTURE_MILES;

FUNCTION ALIM_SERVICE_MILES (NOMLOG       VARCHAR2,
                             P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID AS CONTRACT_ID                     ,
                        CTC.REF_NO                                ,
                        PRS.PREST_INT_ID AS EXTERNAL_REFERENCE    ,
                        PRS.POL_PREST_NO AS REFERENCE_NUMBER      ,
                        SERV_TYPE.ID     AS SERV_TYPE_ID          ,
                        PRS.CODE_CONTRAT_PRESTATION               ,
                        PRS.LIBELLE_SERVICE AS DESCRIPTION        ,
                        PRS.DEB_FAC_PRS_DAT AS APPLYING_START_DATE,
                        PRS.FIN_FAC_PRS_DAT AS APPLYING_END_DATE  ,
                        /*(FIN_FAC_PRS_DAT - DEB_FAC_PRS_DAT) / 30*/
                        NULL                  AS DURATION              ,
                        PRS.PREST_UN_TC_MT    AS MENSUAL_AMOUNT        ,
                        PRS.FIN_FAC_PRS_DAT_1 AS RESILATION_DATE       ,
                        P_DATE_TRAIT          AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'           AS AUDIT_LAST_UPDATE_USER,
                        PRS.PREST_MT_HT       AS MENSUAL_AMOUNT_HT     ,
                        PRS.PREST_MT_TTC      AS SERVICE_MENSUAL_AMOUNT,
                        PRS.POL_PREST_NO      AS CODE_SERVICE,
                        PRS.MT_EXCEDENT_B1    AS MAINTENANCE_KM_COST_1,
                        PRS.MT_EXCEDENT_B2    AS MAINTENANCE_KM_COST_2,
                        PRS.MT_EXCEDENT_B3    AS MAINTENANCE_KM_COST_3,
                        PRS.MT_EXCEDENT_B4    AS MAINTENANCE_KM_COST_4,
                        PRS.PRC_SERVICE_B1    AS MAINTENANCE_DURATION_COST_5,
                        PRS.PRC_SERVICE_B2    AS MAINTENANCE_DURATION_COST_6,
                        PRS.PRC_SERVICE_B3    AS MAINTENANCE_DURATION_COST_7,
                        PRS.PRC_SERVICE_B4    AS MAINTENANCE_DURATION_COST_8,
                        'MILES'                AS BACKOFFICE_CODE,
                        ELT.VAL_MIN_DUR              AS COEF_VARIATION,
                        ELT.VAL_MAX_DUR              AS COEF_EXTENSION,
                        'UNDER'                      AS TYPE_1,
                        ELT.KM_INF_P2_NB             AS MIN_THRESHOLD_1,
                        ELT.KM_INF_P1_NB-1           AS MAX_THRESHOLD_1,
                        'UNDER'                      AS TYPE_2,
                        ELT.KM_INF_P1_NB             AS MIN_THRESHOLD_2,
                        CTC.KILOMETRAGE-1            AS MAX_THRESHOLD_2,
                        'EXCESS'                     AS TYPE_3,
                        CTC.KILOMETRAGE              AS MIN_THRESHOLD_3,
                        ELT.KM_SUP_P1_NB             AS MAX_THRESHOLD_3,
                        'EXCESS'                     AS TYPE_4,
                        ELT.KM_SUP_P1_NB+1           AS MIN_THRESHOLD_4,
                        ELT.KM_SUP_P2_NB             AS MAX_THRESHOLD_4,
                        'UNDER'                      AS TYPE_5,
                        CTC.TPLUS_REDUC_B2           AS MIN_THRESHOLD_5,
                        CTC.TPLUS_REDUC_B1           AS MAX_THRESHOLD_5,
                        'UNDER'                      AS TYPE_6,
                        CTC.TPLUS_REDUC_B1           AS MIN_THRESHOLD_6,
                        CTC.CR_TOT_DUR               AS MAX_THRESHOLD_6,
                        'EXCESS'                     AS TYPE_7,
                        CTC.CR_TOT_DUR+1             AS MIN_THRESHOLD_7,
                        CTC.TPLUS_PROLONG_B1         AS MAX_THRESHOLD_7,
                        'UNDER'                      AS TYPE_8,
                        CTC.TPLUS_PROLONG_B1+1       AS MIN_THRESHOLD_8,
                        CTC.TPLUS_PROLONG_B2         AS MAX_THRESHOLD_8
                FROM
                        FPALLD.FPAQTCTC  CTC,
                        FPALLD.FPAQTELT  ELT,
                        FPALLD.FPAQTPRS  PRS,
                        FPADS_QTCONTRACT CTR,
                        FPADS.FPAQTNOM   SERV_TYPE
                WHERE
                        CTC.REF_NO                     = ELT.REF_NO
                AND     CTC.REF_NO                     = PRS.REF_NO
                AND     ELT.DER_ELEMENT                = 'O'
                AND     CTC.CD_SOURCE                  = 'LEASEBASE'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = PRS.REF_NO
                AND     SERV_TYPE.GROUP_TYPE(+)        = 'SERV_TYPE'
                AND     SERV_TYPE.CODE(+)              = PRS.CODE_CONTRAT_PRESTATION
                AND     SUBSTR(POL_PREST_NO, 1, 2)     NOT IN ('L2', 'L3')
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_MILES', '## ALIM_SERVICE_MILES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTSERVICES
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        EXTERNAL_REFERENCE    ,
                                        REFERENCE_NUMBER      ,
                                        SERV_TYPE_ID          ,
                                        DESCRIPTION           ,
                                        APPLYING_START_DATE   ,
                                        APPLYING_END_DATE     ,
                                        DURATION              ,
                                        MENSUAL_AMOUNT        ,
                                        RESILATION_DATE       ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        MENSUAL_AMOUNT_HT     ,
                                        SERVICE_MENSUAL_AMOUNT,
                                        CODE_SERVICE          ,
                                        MAINTENANCE_KM_COST_1 ,
                                        MAINTENANCE_KM_COST_2 ,
                                        MAINTENANCE_KM_COST_3 ,
                                        MAINTENANCE_KM_COST_4 ,
                                        MAINTENANCE_DURATION_COST_5,
                                        MAINTENANCE_DURATION_COST_6,
                                        MAINTENANCE_DURATION_COST_7,
                                        MAINTENANCE_DURATION_COST_8
                                )
                                VALUES
                                (
                                        FPAQS_DS_SERVICE_ID.NEXTVAL,
                                        REC.CONTRACT_ID            ,
                                        REC.EXTERNAL_REFERENCE     ,
                                        REC.REFERENCE_NUMBER       ,
                                        REC.SERV_TYPE_ID           ,
                                        REC.DESCRIPTION            ,
                                        REC.APPLYING_START_DATE    ,
                                        REC.APPLYING_END_DATE      ,
                                        REC.DURATION               ,
                                        REC.MENSUAL_AMOUNT         ,
                                        REC.RESILATION_DATE        ,
                                        REC.AUDIT_LAST_UPDATE_DATE ,
                                        REC.AUDIT_LAST_UPDATE_USER ,
                                        REC.MENSUAL_AMOUNT_HT      ,
                                        REC.SERVICE_MENSUAL_AMOUNT ,
                                        REC.CODE_SERVICE           ,
                                        REC.MAINTENANCE_KM_COST_1 ,
                                        REC.MAINTENANCE_KM_COST_2 ,
                                        REC.MAINTENANCE_KM_COST_3 ,
                                        REC.MAINTENANCE_KM_COST_4 ,
                                        REC.MAINTENANCE_DURATION_COST_5,
                                        REC.MAINTENANCE_DURATION_COST_6,
                                        REC.MAINTENANCE_DURATION_COST_7,
                                        REC.MAINTENANCE_DURATION_COST_8
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSERVICES
                        SET
                                CONTRACT_ID            = REC.CONTRACT_ID           ,
                                EXTERNAL_REFERENCE     = REC.EXTERNAL_REFERENCE    ,
                                REFERENCE_NUMBER       = REC.REFERENCE_NUMBER      ,
                                SERV_TYPE_ID           = REC.SERV_TYPE_ID          ,
                                DESCRIPTION            = REC.DESCRIPTION           ,
                                APPLYING_START_DATE    = REC.APPLYING_START_DATE   ,
                                APPLYING_END_DATE      = REC.APPLYING_END_DATE     ,
                                DURATION               = REC.DURATION              ,
                                MENSUAL_AMOUNT         = REC.MENSUAL_AMOUNT        ,
                                RESILATION_DATE        = REC.RESILATION_DATE       ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                MENSUAL_AMOUNT_HT      = REC.MENSUAL_AMOUNT_HT     ,
                                SERVICE_MENSUAL_AMOUNT = REC.SERVICE_MENSUAL_AMOUNT,
                                CODE_SERVICE           = REC.CODE_SERVICE          ,
                                MAINTENANCE_KM_COST_1  = REC.MAINTENANCE_KM_COST_1 ,
                                MAINTENANCE_KM_COST_2  = REC.MAINTENANCE_KM_COST_2 ,
                                MAINTENANCE_KM_COST_3  = REC.MAINTENANCE_KM_COST_3 ,
                                MAINTENANCE_KM_COST_4  = REC.MAINTENANCE_KM_COST_4 ,
                                MAINTENANCE_DURATION_COST_5 = REC.MAINTENANCE_DURATION_COST_5 ,
                                MAINTENANCE_DURATION_COST_6 = REC.MAINTENANCE_DURATION_COST_6 ,
                                MAINTENANCE_DURATION_COST_7 = REC.MAINTENANCE_DURATION_COST_7 ,
                                MAINTENANCE_DURATION_COST_8 = REC.MAINTENANCE_DURATION_COST_8
                        WHERE
                                CONTRACT_ID  = REC.CONTRACT_ID
                        AND     CODE_SERVICE = REC.CODE_SERVICE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_MILES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
                
                ------- GRID 1 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_1,
                                  2,
                                  REC.MIN_THRESHOLD_1,
                                  REC.MAX_THRESHOLD_1,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_1,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_1,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_1,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_1,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_1
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 1 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 2 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_2,
                                  1,
                                  REC.MIN_THRESHOLD_2,
                                  REC.MAX_THRESHOLD_2,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_2,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_2,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_2,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_2,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_2
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 2 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                ------- GRID 3 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_3,
                                  1,
                                  REC.MIN_THRESHOLD_3,
                                  REC.MAX_THRESHOLD_3,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_3,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_3,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_3,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_3,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_3
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 3 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
            ------- GRID 4 financialKm 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_4,
                                  2,
                                  REC.MIN_THRESHOLD_4,
                                  REC.MAX_THRESHOLD_4,
                                  'maintenanceKm',
                                  REC.MAINTENANCE_KM_COST_4,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_4,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_4,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_KM_COST_4,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_4
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceKm'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 4 maintenanceKm  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                ------- GRID 1 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_5,
                                  2,
                                  REC.MIN_THRESHOLD_5,
                                  REC.MAX_THRESHOLD_5,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_5,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_5,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_5,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_5,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_5
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 1 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 2 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_6,
                                  1,
                                  REC.MIN_THRESHOLD_6,
                                  REC.MAX_THRESHOLD_6,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_6,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_6,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_6,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_6,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_6
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 2 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 3 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_7,
                                  1,
                                  REC.MIN_THRESHOLD_7,
                                  REC.MAX_THRESHOLD_7,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_7,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_7,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_7,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_7,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_7
                       AND        GRID_ORDER                    = 1
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 3 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
                 ------- GRID 4 maintenanceDuration 
                BEGIN
                      INSERT INTO FPADS.FPADS_QTGRID_SERV (
                                  GRID_TYPE,
                                  GRID_ORDER,
                                  MIN_THRESHOLD,
                                  MAX_THRESHOLD,
                                  TYPE_COST_CODE,
                                  COST_AMOUNT_ET,
                                  COEF_VARIATION,
                                  COEF_EXTENSION,
                                  BACKOFFICE_CURRENT_EXT_REF,
                                  BACKOFFICE_CODE,
                                  CONTRACT_ID,
                                  CODE_SERVICE,
                                  LAST_UPDATE_DATE
                      ) VALUES (
                                  REC.TYPE_8,
                                  2,
                                  REC.MIN_THRESHOLD_8,
                                  REC.MAX_THRESHOLD_8,
                                  'maintenanceDuration',
                                  REC.MAINTENANCE_DURATION_COST_8,
                                  REC.COEF_VARIATION,
                                  REC.COEF_EXTENSION,
                                  REC.REF_NO,
                                  REC.BACKOFFICE_CODE,
                                  REC.CONTRACT_ID,
                                  REC.CODE_SERVICE,
                                  REC.AUDIT_LAST_UPDATE_DATE
                      );
                      N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                      UPDATE FPADS.FPADS_QTGRID_SERV SET
                                  MIN_THRESHOLD                 = REC.MIN_THRESHOLD_8,
                                  MAX_THRESHOLD                 = REC.MAX_THRESHOLD_8,
                                  COST_AMOUNT_ET                = REC.MAINTENANCE_DURATION_COST_8,
                                  COEF_VARIATION                = REC.COEF_VARIATION,
                                  COEF_EXTENSION                = REC.COEF_EXTENSION,
                                  LAST_UPDATE_DATE              = REC.AUDIT_LAST_UPDATE_DATE,
                                  BACKOFFICE_CURRENT_EXT_REF    = REC.REF_NO,
                                  BACKOFFICE_CODE               = REC.BACKOFFICE_CODE
                       WHERE      GRID_TYPE                     = REC.TYPE_8
                       AND        GRID_ORDER                    = 2
                       AND        TYPE_COST_CODE                = 'maintenanceDuration'
                       AND        CONTRACT_ID                   = REC.CONTRACT_ID
                       AND        CODE_SERVICE                  = REC.CODE_SERVICE;
                       N_UPD := N_UPD +1;
              WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_EKIP', 'GRID 4 maintenanceDuration  - Message Erreur pl/sql :' || sqlerrm || '_' || REC.REF_NO);
                END;
                
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_MILES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_MILES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_MILES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SERVICE_MILES', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_SERVICE_MILES;

FUNCTION ALIM_PAYMEANS_MILES (NOMLOG       VARCHAR2,
                              P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID AS CONTRACT_ID                                             ,
                        NULL   AS PM_TYPE_ID                                              ,
                        NULL   AS PM_STATUS_ID                                            ,
                        NULL   AS STATUS_DATE                                             ,
                        CTC.REF_NO                                                        ,
                        CTC.BANQUE_CD_PRI                        AS RIB_BANK              ,
                        CTC.COD_GUICHET_CD_PRI                   AS RIB_AGENCY            ,
                        CTC.CTE_DOM_NO_PRI                       AS RIB_ACCOUNT           ,
                        CTC.RIB_CL_PRI                           AS RIB_KEY               ,
                        CTC.BANQUE_LIB_PRI                       AS BANK_NAME             ,
                        NULL                                     AS BANK_ADDRESS          ,
                        NULL                                     AS BANK_ZIPCODE          ,
                        CTC.VILLE_NOM_RIB_PRI                    AS BANK_CITY             ,
                        NULL                                     AS BANK_COUNTRY          ,
                        NULL                                     AS RUM                   ,
                        NULL                                     AS BIC                   ,
                        CCTR.CCTR_NUM_IBAN_DOM                   AS IBAN                  ,
                        NULL                                     AS ICS                   ,
                        TO_NUMBER(SUBSTR(TIE.ID_CLI_BCU, 2, 10)) AS NUMBER_BCU            ,
                        P_DATE_TRAIT                             AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'                              AS AUDIT_LAST_UPDATE_USER,
                        CTC.REGL_FIN_CD                          AS CODE_PM_TYPE          ,
                        NULL                                     AS CODE_PM_STATUS
                FROM
                        FPALLD.FPAQTCTC        CTC,
                        FPALLD.FPAQTCCTR       CCTR,
                        FPALLD.FPAQTELT        ELT,
                        FPALLD.FPAQTTIE        TIE,
                        FPADS.FPADS_QTCONTRACT CTR
                WHERE
                        CTC.REF_NO                     = ELT.REF_NO
                AND     CTC.ID_CLIE                    = TIE.ID_TIERS
                AND     ELT.DER_ELEMENT                = 'O'
                AND     CTC.CD_SOURCE                  = 'LEASEBASE'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = CTC.REF_NO
                AND     CCTR.CCTR_REF_CONTRAT_INT(+)   = CTC.REF_NO
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_MILES', '## ALIM_PAYMEANS_MILES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTPAYMEANS
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        PM_TYPE_ID            ,
                                        PM_STATUS_ID          ,
                                        STATUS_DATE           ,
                                        RIB_BANK              ,
                                        RIB_AGENCY            ,
                                        RIB_ACCOUNT           ,
                                        RIB_KEY               ,
                                        BANK_NAME             ,
                                        BANK_ADDRESS          ,
                                        BANK_ZIPCODE          ,
                                        BANK_CITY             ,
                                        BANK_COUNTRY          ,
                                        RUM                   ,
                                        BIC                   ,
                                        IBAN                  ,
                                        ICS                   ,
                                        NUMBER_BCU            ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        CODE_PM_TYPE          ,
                                        CODE_PM_STATUS
                                )
                                VALUES
                                (
                                        FPAQS_DS_PAYMEANS_ID.NEXTVAL,
                                        REC.CONTRACT_ID             ,
                                        REC.PM_TYPE_ID              ,
                                        REC.PM_STATUS_ID            ,
                                        REC.STATUS_DATE             ,
                                        REC.RIB_BANK                ,
                                        REC.RIB_AGENCY              ,
                                        REC.RIB_ACCOUNT             ,
                                        REC.RIB_KEY                 ,
                                        REC.BANK_NAME               ,
                                        REC.BANK_ADDRESS            ,
                                        REC.BANK_ZIPCODE            ,
                                        REC.BANK_CITY               ,
                                        REC.BANK_COUNTRY            ,
                                        REC.RUM                     ,
                                        REC.BIC                     ,
                                        REC.IBAN                    ,
                                        REC.ICS                     ,
                                        REC.NUMBER_BCU              ,
                                        REC.AUDIT_LAST_UPDATE_DATE  ,
                                        REC.AUDIT_LAST_UPDATE_USER  ,
                                        REC.CODE_PM_TYPE            ,
                                        REC.CODE_PM_STATUS
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTPAYMEANS
                        SET
                                PM_TYPE_ID             = REC.PM_TYPE_ID            ,
                                PM_STATUS_ID           = REC.PM_STATUS_ID          ,
                                STATUS_DATE            = REC.STATUS_DATE           ,
                                RIB_BANK               = REC.RIB_BANK              ,
                                RIB_AGENCY             = REC.RIB_AGENCY            ,
                                RIB_ACCOUNT            = REC.RIB_ACCOUNT           ,
                                RIB_KEY                = REC.RIB_KEY               ,
                                BANK_NAME              = REC.BANK_NAME             ,
                                BANK_ADDRESS           = REC.BANK_ADDRESS          ,
                                BANK_ZIPCODE           = REC.BANK_ZIPCODE          ,
                                BANK_CITY              = REC.BANK_CITY             ,
                                BANK_COUNTRY           = REC.BANK_COUNTRY          ,
                                RUM                    = REC.RUM                   ,
                                BIC                    = REC.BIC                   ,
                                IBAN                   = REC.IBAN                  ,
                                ICS                    = REC.ICS                   ,
                                NUMBER_BCU             = REC.NUMBER_BCU            ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                CODE_PM_TYPE           = REC.CODE_PM_TYPE          ,
                                CODE_PM_STATUS         = REC.CODE_PM_STATUS
                        WHERE
                                CONTRACT_ID = REC.CONTRACT_ID;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_MILES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_MILES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_MILES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_MILES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_PAYMEANS_MILES', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_PAYMEANS_MILES;

FUNCTION ALIM_STAKEHOLDERS_MILES (NOMLOG       VARCHAR2,
                                  P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        N_DEL NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID AS CONTRACT_ID                                                                                                                      ,
                        CTC.REF_NO                                                                                                                                 ,
                        CASE WHEN SUBSTR(TIE.ID_CLI_BCU, 1 ,1) = 'B' THEN TO_CHAR(TO_NUMBER(SUBSTR(TIE.ID_CLI_BCU, 2, 10))) ELSE TIE.ID_CLI_BCU END AS NUMBER_BCU  ,
                        NULL                                                                                                                        AS RRDI        ,
                        NULL                                                                                                                        AS REF_PERSON  ,
                        USERR.ID                                                                                                                    AS USER_ROLE_ID,
                        TIE.SIREN                                                                                                                                  ,
                        P_DATE_TRAIT AS AUDIT_LAST_UPDATE_DATE                                                                                                     ,
                        'A2C_BATCH'  AS AUDIT_LAST_UPDATE_USER                                                                                                     ,
                        'CLIE'       AS CODE_ROLE                                                                                                                  ,
                        NOM_LIB                                                                                                                                    ,
                        PRENOM_LIB                                                                                                                                 ,
                        TEL_CONTACT                                                                                                                                ,
                        NVL(MAIL_CLIENT, DE.DE_IN_EMAIL) AS MAIL_CLIENT                                                                                            ,
                        VOIE_NO                                                                                                                                    ,
                        RESID_LIB_1 || ' '
                                || RESID_LIB_2 AS RESID_LIB_1,
                        POSTAL_CD_1                          ,
                        Ville_Nom_Adr                        ,
                        ADRESSE_FACTURATION                  ,
                        CDPOSTAL_ADR_FACTURE                 ,
                        VILLE_ADR_FACTURE                    ,
                        ADRESSE_POSTALE                      ,
                        CDPOSTAL_ADR_POSTALE                 ,
                        VILLE_ADR_POSTALE                    ,
                        CCLI.CCLI_GEST_DEF_CITROEN           ,
                        CCLI.CCLI_GEST_DEF_PEUGEOT           ,
                        CCLI.CCLI_GEST_DEF_MARQUE_BLANCHE
                FROM
                        FPALLD.FPAQTCTC  CTC,
                        FPALLD.FPAQTELT  ELT,
                        FPALLD.FPAQTTIE  TIE,
                        FPALLD.FPAQTTIA  TIA,
                        FPADS_QTCONTRACT CTR,
                        FPADS.FPAQTNOM   USERR,
                        FPA.FPAQTDE      DE,
                        FPALLD.FPAQTCCLI CCLI
                WHERE
                        CTC.REF_NO                     = ELT.REF_NO
                AND     TIE.ID_TIERS                   = CTC.ID_CLIE
                AND     TIE.CD_SOURCE                  = 'LEASEBASE'
                AND     ELT.DER_ELEMENT                = 'O'
                AND     CTC.CD_SOURCE                  = 'LEASEBASE'
                AND     TIA.CD_SOURCE                  = TIE.CD_SOURCE
                AND     TIA.TIERS_EXT_ID               = TIE.TIERS_EXT_ID
                AND     TIA.ADRESSE_NO                 = TIE.ADRESSE_NO
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = CTC.REF_NO
                AND     ID_CLI_BCU           IS NOT NULL
                AND     USERR.GROUP_TYPE(+)            = 'USER_ROLE'
                AND     USERR.CODE(+)                  = 'CLIE'
                AND     DE.DE_DE_NUMCONT(+)            = CTC.REF_NO
                AND     CCLI.CCLI_REF_EXT_TIERS(+)     = TIE.TIERS_EXT_ID
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        CTR.ID AS CONTRACT_ID                 ,
                        CTC.REF_NO                            ,
                        CVO.CVO_CD_RRDI_PDV                   ,
                        NULL     AS RRDI                      ,
                        NULL     AS REF_PERSON                ,
                        USERR.ID AS USER_ROLE_ID              ,
                        CVO.CVO_SIREN                         ,
                        P_DATE_TRAIT AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'  AS AUDIT_LAST_UPDATE_USER,
                        'RCLI'                                ,
                        CVO_LIB_NOM_CBB                       ,
                        NULL                                  ,
                        CVO_TEL_FIXE                          ,
                        CVO_LIB_ADRESS_EMAIL                  ,
                        CVO_LIB_ADRES_RUE                     ,
                        CVO_LIB_ADRES_COMP                    ,
                        CVO_CD_POST_ADRES_CCP                 ,
                        CVO_LIB_ADRES_TIERS_COMM              ,
                        NULL ADRESSE_FACTURATION              ,
                        NULL CDPOSTAL_ADR_FACTURE             ,
                        NULL VILLE_ADR_FACTURE                ,
                        NULL ADRESSE_POSTALE                  ,
                        NULL CDPOSTAL_ADR_POSTALE             ,
                        NULL VILLE_ADR_POSTALE                ,
                        NULL                                  ,
                        NULL                                  ,
                        NULL                                  
                FROM
                        FPALLD.FPAQTCTC  CTC ,
                        FPALLD.FPAQTCVO  CVO ,
                        FPALLD.FPAQTCCTR CTCG,
                        FPADS_QTCONTRACT CTR ,
                        FPADS.FPAQTNOM   USERR
                WHERE
                        CTC.REF_NO_INTERNE = CTCG.CCTR_REF_CONTRAT_EXT (+)
                AND     (
                                LPAD(TO_CHAR(CTCG.CCTR_REF_INT_PDV_REPR), 9, '0') = CVO.CVO_REF_INT_MIO (+) )
                AND     CTC.CD_SOURCE                  = 'LEASEBASE'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = REF_NO
                AND     USERR.GROUP_TYPE(+)            = 'USER_ROLE'
                AND     USERR.CODE(+)                  = 'RCLI'
                AND     CVO_CD_RRDI_PDV                IS NOT NULL
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                -- APPO
                SELECT
                        CTR.ID AS CONTRACT_ID                 ,
                        CTC.REF_NO                            ,
                        FOU.FOU_RRDI_PDV                      ,
                        FOU_RRDI_PDV AS RRDI                  ,
                        NULL         AS REF_PERSON            ,
                        USERR.ID     AS USER_ROLE_ID          ,
                        FOU.FOU_SIREN                         ,
                        P_DATE_TRAIT AS AUDIT_LAST_UPDATE_DATE,
                        'A2C_BATCH'  AS AUDIT_LAST_UPDATE_USER,
                        'APPO'                                ,
                        FOU_RAISON_SOCIAL                     ,
                        NULL                                  ,
                        FOU_TELE_FIX                          ,
                        FOU_ADRES_MAIL                        ,
                        FOU_LIB_ADRES_RUE                     ,
                        FOU_LIB_ADRES_COMP                    ,
                        FOU_CD_POST_ADRES                     ,
                        FOU_LIB_ADRES_COMM                    ,
                        NULL ADRESSE_FACTURATION              ,
                        NULL CDPOSTAL_ADR_FACTURE             ,
                        NULL VILLE_ADR_FACTURE                ,
                        NULL ADRESSE_POSTALE                  ,
                        NULL CDPOSTAL_ADR_POSTALE             ,
                        NULL VILLE_ADR_POSTALE                ,
                        NULL                                  ,
                        NULL                                  ,
                        NULL                                          
                FROM
                        FPALLD.FPAQTCTC  CTC ,
                        FPALLD.FPAQTFOU  FOU ,
                        FPALLD.FPAQTCCTR CTCG,
                        FPADS_QTCONTRACT CTR ,
                        FPADS.FPAQTNOM   USERR
                WHERE
                        CTC.REF_NO_INTERNE = CTCG.CCTR_REF_CONTRAT_EXT (+)
                AND     NVL(CTCG.CCTR_REF_INT_PDV_APPOR, CTCG.CCTR_REF_INT_PDV_LIVR) = TO_NUMBER(FOU.FOU_REF_INT_MIO)
                AND     CTC.CD_SOURCE                  = 'LEASEBASE'
                AND     CTR.BACKOFFICE_CURRENT_EXT_REF = REF_NO
                AND     USERR.GROUP_TYPE(+)            = 'USER_ROLE'
                AND     USERR.CODE(+)                  = 'FOUR'
                AND     FOU_RRDI_PDV                   IS NOT NULL
                AND     CTC.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', '## ALIM_STAKEHOLDERS_MILES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;

                BEGIN
                        INSERT INTO
                                FPADS_QTSTAKEHOLDERS
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        NUMBER_BCU            ,
                                        REF_PERSON            ,
                                        USER_ROLE_ID          ,
                                        SIREN                 ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        CODE_ROLE             ,
                                        RRDI                  ,
                                        TEL_CONTACT           ,
                                        MAIL_CLIENT           ,
                                        VOIE_NO               ,
                                        RESID_LIB_1           ,
                                        POSTAL_CD_1           ,
                                        VILLE_NOM_ADR         ,
                                        NOM_RAISON_SOCIALE    ,
                                        PRENOM                ,
                                        ADRESSE_FACTURATION   ,
                                        CDPOSTAL_ADR_FACTURE  ,
                                        VILLE_ADR_FACTURE     ,
                                        ADRESSE_POSTALE       ,
                                        CDPOSTAL_ADR_POSTALE  ,
                                        VILLE_ADR_POSTALE     ,
                                        GEST_DEF_CITROEN           ,
                                        GEST_DEF_PEUGEOT           ,
                                        GEST_DEF_MARQUE_BLANCHE
                                )
                                VALUES
                                (
                                        FPAQS_DS_STAKEHOLDERS_ID.NEXTVAL,
                                        REC.CONTRACT_ID                 ,
                                        REC.NUMBER_BCU                  ,
                                        REC.REF_PERSON                  ,
                                        REC.USER_ROLE_ID                ,
                                        REC.SIREN                       ,
                                        REC.AUDIT_LAST_UPDATE_DATE      ,
                                        REC.AUDIT_LAST_UPDATE_USER      ,
                                        REC.CODE_ROLE                   ,
                                        REC.RRDI                        ,
                                        REC.TEL_CONTACT                 ,
                                        REC.MAIL_CLIENT                 ,
                                        REC.VOIE_NO                     ,
                                        REC.RESID_LIB_1                 ,
                                        REC.POSTAL_CD_1                 ,
                                        REC.VILLE_NOM_ADR               ,
                                        REC.NOM_LIB                     ,
                                        REC.PRENOM_LIB                  ,
                                        REC.ADRESSE_FACTURATION         ,
                                        REC.CDPOSTAL_ADR_FACTURE        ,
                                        REC.VILLE_ADR_FACTURE           ,
                                        REC.ADRESSE_POSTALE             ,
                                        REC.CDPOSTAL_ADR_POSTALE        ,
                                        REC.VILLE_ADR_POSTALE           ,
                                        REC.CCLI_GEST_DEF_CITROEN           ,
                                        REC.CCLI_GEST_DEF_PEUGEOT           ,
                                        REC.CCLI_GEST_DEF_MARQUE_BLANCHE
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSTAKEHOLDERS
                        SET
                                NUMBER_BCU             = REC.NUMBER_BCU            ,
                                REF_PERSON             = REC.REF_PERSON            ,
                                USER_ROLE_ID           = REC.USER_ROLE_ID          ,
                                SIREN                  = REC.SIREN                 ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                RRDI                   = REC.RRDI                  ,
                                TEL_CONTACT            = REC.TEL_CONTACT           ,
                                MAIL_CLIENT            = REC.MAIL_CLIENT           ,
                                VOIE_NO                = REC.VOIE_NO               ,
                                RESID_LIB_1            = REC.RESID_LIB_1           ,
                                POSTAL_CD_1            = REC.POSTAL_CD_1           ,
                                VILLE_NOM_ADR          = REC.VILLE_NOM_ADR         ,
                                NOM_RAISON_SOCIALE     = REC.NOM_LIB               ,
                                PRENOM                 = REC.PRENOM_LIB            ,
                                ADRESSE_FACTURATION    = REC.ADRESSE_FACTURATION   ,
                                CDPOSTAL_ADR_FACTURE   = REC.CDPOSTAL_ADR_FACTURE  ,
                                VILLE_ADR_FACTURE      = REC.VILLE_ADR_FACTURE     ,
                                ADRESSE_POSTALE        = REC.ADRESSE_POSTALE       ,
                                CDPOSTAL_ADR_POSTALE   = REC.CDPOSTAL_ADR_POSTALE  ,
                                VILLE_ADR_POSTALE      = REC.VILLE_ADR_POSTALE     ,
                                GEST_DEF_CITROEN       = REC.CCLI_GEST_DEF_CITROEN,
                                GEST_DEF_PEUGEOT       = REC.CCLI_GEST_DEF_PEUGEOT    ,
                                GEST_DEF_MARQUE_BLANCHE = REC.CCLI_GEST_DEF_MARQUE_BLANCHE
                        WHERE
                                CONTRACT_ID = REC.CONTRACT_ID
                        AND     CODE_ROLE   = REC.CODE_ROLE;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', 'Nombre de mise a jour :'
        ||N_UPD);
        
        
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_STAKEHOLDERS_MILES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_STAKEHOLDERS_MILES;

FUNCTION ALIM_SCHEDULES (NOMLOG       VARCHAR2,
                         P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        CTR.ID                         AS CONTRACT_ID           ,
                        PAEC_NUM_ECH                   AS NUMBER_SCH            ,
                        SCH.PAEC_DT_ECH_TRUNC          AS START_DATE            ,
                        SCH.PAEC_DT_ECH                AS END_DATE              ,
                        CTR.DURATION                   AS DURATION              ,
                        replace(SCH.PAEC_MT_CRB_HT, '.', ',')  AS REFUNDED_CAPITAL      ,
                        replace(SCH.PAEC_MT_INT, '.', ',')     AS INTEREST_AMOUNT       ,
                        NULL                           AS CHARGE_AMOUNT         ,
                        replace(sch.paec_mt_ech_ht, '.', ',')  AS AMOUNT_NO_SERVICE     ,
                        NULL                           AS AMOUNT_SERVICE_HT     ,
                        NULL                           AS AMOUNT_SERVICE_TTC    ,
                        NULL                           AS RATE                  ,
                        NULL                           AS OUTSTANDING_CAPITAL   ,
                        P_DATE_TRAIT                   AS AUDIT_LAST_UPDATE_DATE,
                        'A2C'                          AS AUDIT_LAST_UPDATE_USER,
                        CTR.BACKOFFICE_CURRENT_EXT_REF AS EXTERNAL_REFERENCE
                FROM
                        FPADS_QTTSCHEDULE SCH,
                        FPADS_QTCONTRACT  CTR
                WHERE
                        CTR.BACKOFFICE_CURRENT_EXT_REF = SCH.PAEC_ID_AFF
                AND     PAEC_NUM_ECH         IS NOT NULL;

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SCHEDULES', '## ALIM_SCHEDULES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTSCHEDULES
                                (
                                        ID                    ,
                                        CONTRACT_ID           ,
                                        NUMBER_SCH            ,
                                        START_DATE            ,
                                        END_DATE              ,
                                        DURATION              ,
                                        REFUNDED_CAPITAL      ,
                                        INTEREST_AMOUNT       ,
                                        CHARGE_AMOUNT         ,
                                        AMOUNT_NO_SERVICE     ,
                                        AMOUNT_SERVICE_HT     ,
                                        AMOUNT_SERVICE_TTC    ,
                                        RATE                  ,
                                        OUTSTANDING_CAPITAL   ,
                                        AUDIT_LAST_UPDATE_DATE,
                                        AUDIT_LAST_UPDATE_USER,
                                        EXTERNAL_REFERENCE
                                )
                                VALUES
                                (
                                        FPAQS_DS_SCHEDULES_ID.NEXTVAL,
                                        REC.CONTRACT_ID              ,
                                        REC.NUMBER_SCH               ,
                                        REC.START_DATE               ,
                                        REC.END_DATE                 ,
                                        REC.DURATION                 ,
                                        REC.REFUNDED_CAPITAL         ,
                                        REC.INTEREST_AMOUNT          ,
                                        REC.CHARGE_AMOUNT            ,
                                        REC.AMOUNT_NO_SERVICE        ,
                                        REC.AMOUNT_SERVICE_HT        ,
                                        REC.AMOUNT_SERVICE_TTC       ,
                                        REC.RATE                     ,
                                        REC.OUTSTANDING_CAPITAL      ,
                                        REC.AUDIT_LAST_UPDATE_DATE   ,
                                        REC.AUDIT_LAST_UPDATE_USER   ,
                                        REC.EXTERNAL_REFERENCE
                                );
                        
                        N_INS := N_INS +1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTSCHEDULES
                        SET
                                START_DATE             = REC.START_DATE            ,
                                END_DATE               = REC.END_DATE              ,
                                DURATION               = REC.DURATION              ,
                                REFUNDED_CAPITAL       = REC.REFUNDED_CAPITAL      ,
                                INTEREST_AMOUNT        = REC.INTEREST_AMOUNT       ,
                                CHARGE_AMOUNT          = REC.CHARGE_AMOUNT         ,
                                AMOUNT_NO_SERVICE      = REC.AMOUNT_NO_SERVICE     ,
                                AMOUNT_SERVICE_HT      = REC.AMOUNT_SERVICE_HT     ,
                                AMOUNT_SERVICE_TTC     = REC.AMOUNT_SERVICE_TTC    ,
                                RATE                   = REC.RATE                  ,
                                OUTSTANDING_CAPITAL    = REC.OUTSTANDING_CAPITAL   ,
                                AUDIT_LAST_UPDATE_DATE = REC.AUDIT_LAST_UPDATE_DATE,
                                AUDIT_LAST_UPDATE_USER = REC.AUDIT_LAST_UPDATE_USER,
                                EXTERNAL_REFERENCE     = REC.EXTERNAL_REFERENCE
                        WHERE
                                CONTRACT_ID = REC.CONTRACT_ID
                        AND     NUMBER_SCH  = REC.NUMBER_SCH;
                        
                        N_UPD := N_UPD +1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SCHEDULES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.CONTRACT_ID);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SCHEDULES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SCHEDULES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SCHEDULES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_SCHEDULES', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_SCHEDULES;

FUNCTION ALIM_ASSETS (NOMLOG       VARCHAR2,
                      P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
  FPALLD.DET_ELT_FINANCIER.SERIE_NO               AS BI_VIN            ,
  FPALLD.DET_ELT_FINANCIER.GENRE_CD_TRANSCO       AS BI_CDTYPE         ,
  FPALLD.DET_ELT_FINANCIER.GENRE_CD_TRANSCO       AS BI_CDGENVEH       ,
  NVL(SUBSTR(FPALLD.DET_ELT_FINANCIER.MARQUE_LIB, 1, 4), DECODE(FPALLD.FPAQTCCTR.CCTR_MARQUE_CONSTRUCTEUR, 'CIT', 'CITR', 'PEU', 'PEUG', FPALLD.FPAQTCCTR.CCTR_MARQUE_CONSTRUCTEUR))  AS BI_CDMQ           ,
  'FR'                                            AS BI_CDPAYS         ,
  P_DATE_TRAIT                                    AS BI_DTCREAT        ,
  FPALLD.DET_ELT_FINANCIER.LIV_VEH_DAT            AS BI_DTLIVR         ,
  REPLACE(FPALLD.DET_ELT_FINANCIER.IMMAT_NO,' ','') AS BI_IMMAT        ,    
  FPALLD.DET_ELT_FINANCIER.IMMAT_DAT              AS BI_DTIMMAT        ,
  FPALLD.DET_ELT_FINANCIER.PREM_IMMAT_DAT         AS BI_DTPRIMMAT      ,
  DE_PG_KMINITIAL                                 AS BI_KMINITIAL      ,
  FPALLD.DET_ELT_FINANCIER.LCDV_CODE              AS BI_CDPSA          ,
  FPALLD.FPAQTLV.IMMOB_LIB                      AS BI_LLCOM          ,
  to_number(DECODE (FPALLD.FPAQTVEH.EMISSION_CO2,0,NULL,trunc(FPALLD.FPAQTVEH.EMISSION_CO2, 0))) AS BI_EMCO           ,
  NULL                                            AS BI_CDCOTR         ,
  NULL                                            AS BI_CDIDVEHCOTR    ,
  FPALLD.DET_ELT_FINANCIER.PUI_FIS_VAL            AS BI_PUISSFISC      ,
  'GP'                                            AS BI_CDSRCCREA      ,
  FPALLD.DET_ELT_FINANCIER.OCCASION_CD_TRANSCO    AS BI_CDETAT         ,
  NULL                                            AS BI_CDSTATUT       ,
  FPALLD.DET_ELT_FINANCIER.USAGE_PROF_CD_TRANSCO  AS BI_CDUSAG         ,
  FPALLD.DET_CTR_COURANT.ENERGIE_TRANSCO          AS BI_CDCARB         ,
  NULL                                            AS BI_CYLIND         ,
  NULL                                            AS BI_PUISSDEV       ,
  NULL                                            AS BI_CDOBJFIN       ,
  NULL                                            AS BI_DATDEBGAR_BVV  ,
  NULL                                            AS BI_DATFINGAR_BVV  ,
  NULL                                            AS BI_DATDEBGARVO_BVV,
  NULL                                            AS BI_DATFINGARVO_BVV,
  NULL                                            AS BI_DATMISCIRC_BVV ,
  NULL                                            AS BI_IMMAT_BVV      ,
  NULL                                            AS BI_CDETAGS        ,
  NULL                                            AS BI_CDCLACO2       ,
  P_DATE_TRAIT                                    AS BI_DTUPDAT        ,
  NULL                                            AS BI_DTLQCONT       ,
  tvb.vb_km_rel                                   AS BI_ACTUALMILEAGE  ,
  TVB.VB_DT_RELKM                                 AS BI_ACTUALMILEAGEDATE  ,
  FPALLD.DET_CTR_COURANT.FLAG_LEASECO            AS BI_IS_LEASECO     ,
  FPALLD.DET_CTR_COURANT.REF_NO                   AS BACKOFFICE_CURRENT_EXT_REF,
  FPALLD.DET_ELT_FINANCIER.BLVD_CODE              AS BI_CDBLVD
FROM
  FPALLD.DET_ELT_FINANCIER,
  FPALLD.FPAQTLV,
  FPALLD.FPAQTVEH,
  FPALLD.DET_CTR_COURANT,
  FPALLD.FPAQTCCTR,
  FPA.FPAQTDE,
  FPA.FPAQTVB TVB
WHERE
  ( FPALLD.DET_CTR_COURANT.REF_NO_INTERNE=FPALLD.DET_ELT_FINANCIER.REF_NO_INTERNE(+)  )
  AND  ( FPALLD.DET_ELT_FINANCIER.LCDV_CODE=FPALLD.FPAQTLV.VERSION_CODE(+)  )
  AND  ( FPALLD.DET_ELT_FINANCIER.DER_ELEMENT(+) = 'O'  )
  AND  ( FPALLD.FPAQTVEH.SERIE_NO(+)=FPALLD.DET_ELT_FINANCIER.SERIE_NO  )
  AND     FPALLD.DET_CTR_COURANT.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
  AND TO_CHAR(FPALLD.FPAQTCCTR.CCTR_REF_CONTRAT_INT(+)) = FPALLD.DET_ELT_FINANCIER.REF_NO
  AND FPALLD.DET_ELT_FINANCIER.SERIE_NO IS NOT NULL
  AND FPA.FPAQTDE.DE_DE_NUMCONT(+) = FPALLD.DET_CTR_COURANT.REF_NO
  AND TVB.VB_CD_MVT(+) = '10'
  AND TVB.VB_CD_PAYS(+) = 'FR'
  AND TVB.VB_VIN(+) = FPALLD.DET_ELT_FINANCIER.SERIE_NO
  AND TVB.VB_FLAG_PERTINENT(+) = 'Y'
                
                UNION
                SELECT
  FPALLD.DET_ELT_FINANCIER.SERIE_NO               AS BI_VIN            ,
  FPALLD.DET_ELT_FINANCIER.GENRE_CD_TRANSCO       AS BI_CDTYPE         ,
  FPALLD.DET_ELT_FINANCIER.GENRE_CD_TRANSCO       AS BI_CDGENVEH       ,
  NVL(SUBSTR(FPALLD.DET_ELT_FINANCIER.MARQUE_LIB, 1, 4), DECODE(FPALLD.FPAQTCCTR.CCTR_MARQUE_CONSTRUCTEUR, 'CIT', 'CITR', 'PEU', 'PEUG', FPALLD.FPAQTCCTR.CCTR_MARQUE_CONSTRUCTEUR))  AS BI_CDMQ           ,
  'FR'                                            AS BI_CDPAYS         ,
  P_DATE_TRAIT                                    AS BI_DTCREAT        ,
  FPALLD.DET_ELT_FINANCIER.LIV_VEH_DAT            AS BI_DTLIVR         ,
  REPLACE(FPALLD.DET_ELT_FINANCIER.IMMAT_NO,' ','') AS BI_IMMAT        ,    
  FPALLD.DET_ELT_FINANCIER.IMMAT_DAT              AS BI_DTIMMAT        ,
  FPALLD.DET_ELT_FINANCIER.PREM_IMMAT_DAT         AS BI_DTPRIMMAT      ,
  DE_PG_KMINITIAL                                 AS BI_KMINITIAL      ,
  FPALLD.DET_ELT_FINANCIER.LCDV_CODE              AS BI_CDPSA          ,
  FPALLD.FPAQTLV.IMMOB_LIB                      AS BI_LLCOM          ,
  to_number(DECODE (FPALLD.FPAQTVEH.EMISSION_CO2,0,NULL,trunc(FPALLD.FPAQTVEH.EMISSION_CO2, 0))) AS BI_EMCO           ,
  NULL                                            AS BI_CDCOTR         ,
  NULL                                            AS BI_CDIDVEHCOTR    ,
  FPALLD.DET_ELT_FINANCIER.PUI_FIS_VAL            AS BI_PUISSFISC      ,
  'GP'                                            AS BI_CDSRCCREA      ,
  FPALLD.DET_ELT_FINANCIER.OCCASION_CD_TRANSCO    AS BI_CDETAT         ,
  NULL                                            AS BI_CDSTATUT       ,
  FPALLD.DET_ELT_FINANCIER.USAGE_PROF_CD_TRANSCO  AS BI_CDUSAG         ,
  FPALLD.DET_CTR_COURANT.ENERGIE_TRANSCO          AS BI_CDCARB         ,
  NULL                                            AS BI_CYLIND         ,
  NULL                                            AS BI_PUISSDEV       ,
  NULL                                            AS BI_CDOBJFIN       ,
  NULL                                            AS BI_DATDEBGAR_BVV  ,
  NULL                                            AS BI_DATFINGAR_BVV  ,
  NULL                                            AS BI_DATDEBGARVO_BVV,
  NULL                                            AS BI_DATFINGARVO_BVV,
  NULL                                            AS BI_DATMISCIRC_BVV ,
  NULL                                            AS BI_IMMAT_BVV      ,
  NULL                                            AS BI_CDETAGS        ,
  NULL                                            AS BI_CDCLACO2       ,
  P_DATE_TRAIT                                    AS BI_DTUPDAT        ,
  NULL                                            AS BI_DTLQCONT       ,
  tvb.vb_km_rel                                   AS BI_ACTUALMILEAGE  ,
  TVB.VB_DT_RELKM                                 AS BI_ACTUALMILEAGEDATE  ,
  FPALLD.DET_CTR_COURANT.FLAG_LEASECO            AS BI_IS_LEASECO     ,
  FPALLD.DET_CTR_COURANT.REF_NO                   AS BACKOFFICE_CURRENT_EXT_REF,
  FPALLD.DET_ELT_FINANCIER.BLVD_CODE              AS BI_CDBLVD
FROM
  FPALLD.DET_ELT_FINANCIER,
  FPALLD.FPAQTLV,
  FPALLD.FPAQTVEH,
  FPALLD.DET_CTR_COURANT,
  FPALLD.FPAQTCCTR,
  FPA.FPAQTDE,
  FPA.FPAQTVB TVB
WHERE
  ( FPALLD.DET_CTR_COURANT.REF_NO_INTERNE=FPALLD.DET_ELT_FINANCIER.REF_NO_INTERNE(+)  )
  AND  ( FPALLD.DET_ELT_FINANCIER.LCDV_CODE=FPALLD.FPAQTLV.VERSION_CODE(+)  )
  AND  ( FPALLD.DET_ELT_FINANCIER.DER_ELEMENT(+) = 'O'  )
  AND  ( FPALLD.FPAQTVEH.SERIE_NO(+)=FPALLD.DET_ELT_FINANCIER.SERIE_NO  )
  AND     FPALLD.DET_CTR_COURANT.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
  AND TO_CHAR(FPALLD.FPAQTCCTR.CCTR_REF_CONTRAT_INT(+)) = FPALLD.DET_ELT_FINANCIER.REF_NO
  AND FPALLD.DET_ELT_FINANCIER.SERIE_NO IS NOT NULL
  AND FPA.FPAQTDE.DE_DE_NUMCONT(+) = SUBSTR(FPALLD.DET_CTR_COURANT.REF_NO_INTERNE, 5, 6)
  AND TVB.VB_CD_MVT(+) = '10'
  AND TVB.VB_CD_PAYS(+) = 'FR'
  AND TVB.VB_VIN(+) = FPALLD.DET_ELT_FINANCIER.SERIE_NO
  AND TVB.VB_FLAG_PERTINENT(+) = 'Y'
                UNION
                SELECT
  FPALLD.DET_ELT_FINANCIER.SERIE_NO               AS BI_VIN            ,
  FPALLD.DET_ELT_FINANCIER.GENRE_CD_TRANSCO       AS BI_CDTYPE         ,
  FPALLD.DET_ELT_FINANCIER.GENRE_CD_TRANSCO       AS BI_CDGENVEH       ,
  NVL(SUBSTR(FPALLD.DET_ELT_FINANCIER.MARQUE_LIB, 1, 4), DECODE(FPALLD.FPAQTCCTR.CCTR_MARQUE_CONSTRUCTEUR, 'CIT', 'CITR', 'PEU', 'PEUG', FPALLD.FPAQTCCTR.CCTR_MARQUE_CONSTRUCTEUR))  AS BI_CDMQ           ,
  'FR'                                            AS BI_CDPAYS         ,
  P_DATE_TRAIT                                    AS BI_DTCREAT        ,
  FPALLD.DET_ELT_FINANCIER.LIV_VEH_DAT            AS BI_DTLIVR         ,
  REPLACE(FPALLD.DET_ELT_FINANCIER.IMMAT_NO,' ','') AS BI_IMMAT        ,    
  FPALLD.DET_ELT_FINANCIER.IMMAT_DAT              AS BI_DTIMMAT        ,
  FPALLD.DET_ELT_FINANCIER.PREM_IMMAT_DAT         AS BI_DTPRIMMAT      ,
  DE_PG_KMINITIAL                                 AS BI_KMINITIAL      ,
  FPALLD.DET_ELT_FINANCIER.LCDV_CODE              AS BI_CDPSA          ,
  FPALLD.FPAQTLV.IMMOB_LIB                      AS BI_LLCOM          ,
  to_number(DECODE (FPALLD.FPAQTVEH.EMISSION_CO2,0,NULL,trunc(FPALLD.FPAQTVEH.EMISSION_CO2, 0))) AS BI_EMCO           ,
  NULL                                            AS BI_CDCOTR         ,
  NULL                                            AS BI_CDIDVEHCOTR    ,
  FPALLD.DET_ELT_FINANCIER.PUI_FIS_VAL            AS BI_PUISSFISC      ,
  'GP'                                            AS BI_CDSRCCREA      ,
  FPALLD.DET_ELT_FINANCIER.OCCASION_CD_TRANSCO    AS BI_CDETAT         ,
  NULL                                            AS BI_CDSTATUT       ,
  FPALLD.DET_ELT_FINANCIER.USAGE_PROF_CD_TRANSCO  AS BI_CDUSAG         ,
  FPALLD.DET_CTR_COURANT.ENERGIE_TRANSCO          AS BI_CDCARB         ,
  NULL                                            AS BI_CYLIND         ,
  NULL                                            AS BI_PUISSDEV       ,
  NULL                                            AS BI_CDOBJFIN       ,
  NULL                                            AS BI_DATDEBGAR_BVV  ,
  NULL                                            AS BI_DATFINGAR_BVV  ,
  NULL                                            AS BI_DATDEBGARVO_BVV,
  NULL                                            AS BI_DATFINGARVO_BVV,
  NULL                                            AS BI_DATMISCIRC_BVV ,
  NULL                                            AS BI_IMMAT_BVV      ,
  NULL                                            AS BI_CDETAGS        ,
  NULL                                            AS BI_CDCLACO2       ,
  P_DATE_TRAIT                                    AS BI_DTUPDAT        ,
  NULL                                            AS BI_DTLQCONT       ,
  tvb.vb_km_rel                                   AS BI_ACTUALMILEAGE  ,
  TVB.VB_DT_RELKM                                 AS BI_ACTUALMILEAGEDATE  ,
  FPALLD.DET_CTR_COURANT.FLAG_LEASECO            AS BI_IS_LEASECO     ,
  FPALLD.DET_CTR_COURANT.REF_NO                   AS BACKOFFICE_CURRENT_EXT_REF,
  FPALLD.DET_ELT_FINANCIER.BLVD_CODE              AS BI_CDBLVD
FROM
  FPALLD.DET_ELT_FINANCIER,
  FPALLD.FPAQTLV,
  FPALLD.FPAQTVEH,
  FPALLD.DET_CTR_COURANT,
  FPALLD.FPAQTCCTR,
  FPA.FPAQTDE,
  FPA.FPAQTVB TVB
WHERE
  ( FPALLD.DET_CTR_COURANT.REF_NO_INTERNE=FPALLD.DET_ELT_FINANCIER.REF_NO_INTERNE(+)  )
  AND  ( FPALLD.DET_ELT_FINANCIER.LCDV_CODE=FPALLD.FPAQTLV.VERSION_CODE(+)  )
  AND  ( FPALLD.DET_ELT_FINANCIER.DER_ELEMENT(+) = 'O'  )
  AND  ( FPALLD.FPAQTVEH.SERIE_NO(+)=FPALLD.DET_ELT_FINANCIER.SERIE_NO  )
  AND     FPALLD.DET_CTR_COURANT.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
  AND TO_CHAR(FPALLD.FPAQTCCTR.CCTR_REF_CONTRAT_INT(+)) = FPALLD.DET_ELT_FINANCIER.REF_NO
  AND FPALLD.DET_ELT_FINANCIER.SERIE_NO IS NOT NULL
  AND FPA.FPAQTDE.DE_DE_NUMCONT(+) = FPALLD.DET_CTR_COURANT.REF_NO_INTERNE
  AND TVB.VB_CD_MVT(+) = '10'
  AND TVB.VB_CD_PAYS(+) = 'FR'
  AND TVB.VB_VIN(+) = FPALLD.DET_ELT_FINANCIER.SERIE_NO
  AND TVB.VB_FLAG_PERTINENT(+) = 'Y';

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ASSETS', '## ALIM_ASSETS ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTASSETS
                                (
                                        BI_ID             ,
                                        BI_VIN            ,
                                        BI_CDTYPE         ,
                                        BI_CDMQ           ,
                                        BI_CDPAYS         ,
                                        BI_DTCREAT        ,
                                        BI_DTLIVR         ,
                                        BI_IMMAT          ,
                                        BI_DTIMMAT        ,
                                        BI_DTPRIMMAT      ,
                                        BI_KMINITIAL      ,
                                        BI_CDPSA          ,
                                        BI_LLCOM          ,
                                        BI_EMCO           ,
                                        BI_CDCOTR         ,
                                        BI_CDIDVEHCOTR    ,
                                        BI_PUISSFISC      ,
                                        BI_CDSRCCREA      ,
                                        BI_CDETAT         ,
                                        BI_CDSTATUT       ,
                                        BI_CDUSAG         ,
                                        BI_CDCARB         ,
                                        BI_CYLIND         ,
                                        BI_PUISSDEV       ,
                                        BI_CDOBJFIN       ,
                                        BI_DATDEBGAR_BVV  ,
                                        BI_DATFINGAR_BVV  ,
                                        BI_DATDEBGARVO_BVV,
                                        BI_DATFINGARVO_BVV,
                                        BI_DATMISCIRC_BVV ,
                                        BI_IMMAT_BVV      ,
                                        BI_CDETAGS        ,
                                        BI_CDGENVEH       ,
                                        BI_CDCLACO2       ,
                                        BI_DTUPDAT        ,
                                        BI_DTLQCONT       ,
                                        BI_ACTUALMILEAGE  ,
                                        BI_ACTUALMILEAGEDATE,
                                        BI_IS_LEASECO     ,
                                        BACKOFFICE_CURRENT_EXT_REF,
                                        BI_CDBLVD
                                )
                                VALUES
                                (
                                        FPAQS_DS_ASSETS_ID.NEXTVAL,
                                        REC.BI_VIN                ,
                                        REC.BI_CDTYPE             ,
                                        REC.BI_CDMQ               ,
                                        REC.BI_CDPAYS             ,
                                        REC.BI_DTCREAT            ,
                                        REC.BI_DTLIVR             ,
                                        REC.BI_IMMAT              ,
                                        REC.BI_DTIMMAT            ,
                                        REC.BI_DTPRIMMAT          ,
                                        REC.BI_KMINITIAL          ,
                                        REC.BI_CDPSA              ,
                                        REC.BI_LLCOM              ,
                                        REC.BI_EMCO               ,
                                        REC.BI_CDCOTR             ,
                                        REC.BI_CDIDVEHCOTR        ,
                                        REC.BI_PUISSFISC          ,
                                        REC.BI_CDSRCCREA          ,
                                        REC.BI_CDETAT             ,
                                        REC.BI_CDSTATUT           ,
                                        REC.BI_CDUSAG             ,
                                        REC.BI_CDCARB             ,
                                        REC.BI_CYLIND             ,
                                        REC.BI_PUISSDEV           ,
                                        REC.BI_CDOBJFIN           ,
                                        REC.BI_DATDEBGAR_BVV      ,
                                        REC.BI_DATFINGAR_BVV      ,
                                        REC.BI_DATDEBGARVO_BVV    ,
                                        REC.BI_DATFINGARVO_BVV    ,
                                        REC.BI_DATMISCIRC_BVV     ,
                                        REC.BI_IMMAT_BVV          ,
                                        REC.BI_CDETAGS            ,
                                        REC.BI_CDGENVEH           ,
                                        REC.BI_CDCLACO2           ,
                                        REC.BI_DTUPDAT            ,
                                        REC.BI_DTLQCONT           ,
                                        REC.BI_ACTUALMILEAGE      ,
                                        REC.BI_ACTUALMILEAGEDATE  ,
                                        REC.BI_IS_LEASECO         ,
                                        REC.BACKOFFICE_CURRENT_EXT_REF,
                                        REC.BI_CDBLVD
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTASSETS
                        SET
                                BI_CDTYPE          = REC.BI_CDTYPE         ,
                                BI_CDMQ            = REC.BI_CDMQ           ,
                                BI_CDPAYS          = REC.BI_CDPAYS         ,
                                BI_DTCREAT         = REC.BI_DTCREAT        ,
                                BI_DTLIVR          = REC.BI_DTLIVR         ,
                                BI_IMMAT           = REC.BI_IMMAT          ,
                                BI_DTIMMAT         = REC.BI_DTIMMAT        ,
                                BI_DTPRIMMAT       = REC.BI_DTPRIMMAT      ,
                                BI_KMINITIAL       = REC.BI_KMINITIAL      ,
                                BI_CDPSA           = REC.BI_CDPSA          ,
                                BI_LLCOM           = REC.BI_LLCOM          ,
                                BI_EMCO            = REC.BI_EMCO           ,
                                BI_CDCOTR          = REC.BI_CDCOTR         ,
                                BI_CDIDVEHCOTR     = REC.BI_CDIDVEHCOTR    ,
                                BI_PUISSFISC       = REC.BI_PUISSFISC      ,
                                BI_CDSRCCREA       = REC.BI_CDSRCCREA      ,
                                BI_CDETAT          = REC.BI_CDETAT         ,
                                BI_CDSTATUT        = REC.BI_CDSTATUT       ,
                                BI_CDUSAG          = REC.BI_CDUSAG         ,
                                BI_CDCARB          = REC.BI_CDCARB         ,
                                BI_CYLIND          = REC.BI_CYLIND         ,
                                BI_PUISSDEV        = REC.BI_PUISSDEV       ,
                                BI_CDOBJFIN        = REC.BI_CDOBJFIN       ,
                                BI_DATDEBGAR_BVV   = REC.BI_DATDEBGAR_BVV  ,
                                BI_DATFINGAR_BVV   = REC.BI_DATFINGAR_BVV  ,
                                BI_DATDEBGARVO_BVV = REC.BI_DATDEBGARVO_BVV,
                                BI_DATFINGARVO_BVV = REC.BI_DATFINGARVO_BVV,
                                BI_DATMISCIRC_BVV  = REC.BI_DATMISCIRC_BVV ,
                                BI_IMMAT_BVV       = REC.BI_IMMAT_BVV      ,
                                BI_CDETAGS         = REC.BI_CDETAGS        ,
                                BI_CDGENVEH        = REC.BI_CDGENVEH       ,
                                BI_CDCLACO2        = REC.BI_CDCLACO2       ,
                                BI_DTUPDAT         = REC.BI_DTUPDAT        ,
                                BI_DTLQCONT        = REC.BI_DTLQCONT       ,
                                BI_ACTUALMILEAGE   = REC.BI_ACTUALMILEAGE  ,
                                BI_ACTUALMILEAGEDATE = REC.BI_ACTUALMILEAGEDATE,
                                BI_IS_LEASECO        = REC.BI_IS_LEASECO,
                                BI_CDBLVD            = REC.BI_CDBLVD
                        WHERE
                                BI_VIN = REC.BI_VIN
                        AND     BACKOFFICE_CURRENT_EXT_REF = REC.BACKOFFICE_CURRENT_EXT_REF;
                        
                        N_UPD := N_UPD+1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ASSETS', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.BI_VIN);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ASSETS', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ASSETS', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ASSETS', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ASSETS', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_ASSETS;

FUNCTION ALIM_AMOUNTS (NOMLOG       VARCHAR2,
                       P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                -- CAS 1
                SELECT
                        ASS.BI_ID AS MT_ID_BI    ,
                        A.DE_BD_VIN              ,
                        'PVPH'          AS MT_CDTYPMONTANT,
                        A.DE_BD_MTCATAL AS MT_MONTANT
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        A.DE_DE_NUMCONT = B.REF_NO
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'PVPT' AS TYPE_MONTANT,
                        A.DE_BD_MTCATTTC
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        A.DE_DE_NUMCONT = B.REF_NO
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'OTRH' AS TYPE_MONTANT,
                        A.DE_BD_MTPVT
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        A.DE_DE_NUMCONT = B.REF_NO
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'PVPT' AS TYPE_MONTANT,
                        A.DE_BD_MTPVTTTC
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        A.DE_DE_NUMCONT = B.REF_NO
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                UNION
                -- CAS 2
                SELECT
                        ASS.BI_ID AS MT_ID_BI    ,
                        A.DE_BD_VIN              ,
                        'PVPH'          AS MT_CDTYPMONTANT,
                        A.DE_BD_MTCATAL AS MT_MONTANT
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = SUBSTR(b.ref_no_interne, 5, 6)
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'PVPT' AS TYPE_MONTANT,
                        A.DE_BD_MTCATTTC
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = SUBSTR(b.ref_no_interne, 5, 6)
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'OTRH' AS TYPE_MONTANT,
                        A.DE_BD_MTPVT
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = SUBSTR(b.ref_no_interne, 5, 6)
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'PVPT' AS TYPE_MONTANT,
                        A.DE_BD_MTPVTTTC
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = SUBSTR(b.ref_no_interne, 5, 6)
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                UNION
                -- CAS 3
                SELECT
                        ASS.BI_ID AS MT_ID_BI    ,
                        A.DE_BD_VIN              ,
                        'PVPH'          AS MT_CDTYPMONTANT,
                        A.DE_BD_MTCATAL AS MT_MONTANT
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = b.ref_no_interne
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'PVPT' AS TYPE_MONTANT,
                        A.DE_BD_MTCATTTC
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = b.ref_no_interne
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'OTRH' AS TYPE_MONTANT,
                        A.DE_BD_MTPVT
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = b.ref_no_interne
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC)
                
                UNION
                
                SELECT
                        ASS.BI_ID AS MT_ID_BI ,
                        A.DE_BD_VIN           ,
                        'PVPT' AS TYPE_MONTANT,
                        A.DE_BD_MTPVTTTC
                FROM
                        FPA.FPAQTDE     A,
                        FPALLD.FPAQTCTC B,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.DE_DE_NUMCONT = b.ref_no_interne
                AND     ASS.BI_VIN         = A.DE_BD_VIN
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_AMOUNTS', '## ALIM_AMOUNTS ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTAMOUNTS
                                (
                                        MT_ID          ,
                                        MT_ID_BI       ,
                                        MT_CDTYPMONTANT,
                                        MT_MONTANT
                                )
                                VALUES
                                (
                                        FPAQS_DS_AMOUNTS_ID.NEXTVAL,
                                        REC.MT_ID_BI               ,
                                        REC.MT_CDTYPMONTANT        ,
                                        REC.MT_MONTANT
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTAMOUNTS
                        SET
                                MT_MONTANT = REC.MT_MONTANT
                        WHERE
                                MT_ID_BI        = REC.MT_ID_BI
                        AND     MT_CDTYPMONTANT = REC.MT_CDTYPMONTANT;
                        
                        N_UPD := N_UPD+1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.MT_ID_BI);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_AMOUNTS', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_AMOUNTS', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_AMOUNTS', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_AMOUNTS', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_AMOUNTS;

FUNCTION ALIM_OPTIONS (NOMLOG       VARCHAR2,
                       P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        ASS.BI_ID AS OP_ID_BI                                      ,
                        a.SERIE_NO                                                ,
                        opt.ATTRIB_PERS_CD                            AS OP_CDOPT  ,
                        REPLACE(NVL(ROP.TROP_LIBLONG, 'Autres'), ';') AS OP_LBOPT  ,
                        opt.OPT_MONTANT_HT                            AS OP_MTHTOPT,
                        opt.OPT_MONTANT_TTC                           AS OP_MTTTCOPT
                FROM
                        --fpa.fpaqtde     a  ,
                        fpalld.fpaqtctc b  ,
                        fpalld.fpaqtelt a,
                        FPALLD.FPAQTROP ROP,
                        fpalld.fpaqtopt opt,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.REF_NO           = b.REF_NO
                AND     a.DER_ELEMENT      = 'O'
                AND     a.SERIE_NO        = opt.SERIE_NO
                AND     opt.ATTRIB_PERS_CD = ROP.TROP_CDOPT
                AND     opt.LCDV_CODE      = ROP.LCDV_CODE
                AND     ASS.BI_VIN         = a.SERIE_NO
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_OPTIONS', '## ALIM_OPTIONS ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTOPTIONS
                                (
                                        OP_ID      ,
                                        OP_LBOPT   ,
                                        OP_MTHTOPT ,
                                        OP_MTTTCOPT,
                                        OP_CDOPT   ,
                                        OP_ID_BI
                                )
                                VALUES
                                (
                                        FPAQS_DS_OPTIONS_ID.NEXTVAL,
                                        REC.OP_LBOPT               ,
                                        REC.OP_MTHTOPT             ,
                                        REC.OP_MTTTCOPT            ,
                                        REC.OP_CDOPT               ,
                                        REC.OP_ID_BI
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTOPTIONS
                        SET
                                OP_LBOPT    = REC.OP_LBOPT  ,
                                OP_MTHTOPT  = REC.OP_MTHTOPT,
                                OP_MTTTCOPT = REC.OP_MTTTCOPT
                        WHERE
                                OP_CDOPT = REC.OP_CDOPT
                        AND     OP_ID_BI = REC.OP_ID_BI;
                        
                        N_UPD := N_UPD+1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_OPTIONS', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.OP_ID_BI);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_OPTIONS', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_OPTIONS', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_OPTIONS', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_OPTIONS', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_OPTIONS;

FUNCTION ALIM_ACCESSOIRES (NOMLOG       VARCHAR2,
                           P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        ASS.BI_ID AS AC_ID_BI       ,
                        a.SERIE_NO                 ,
                        acc.ACC_CDACC                     AS AC_CDTYPACC,
                        REPLACE(acc.ACC_LIBACC, ';', '-') AS AC_LBACC   ,
                        acc.ACC_MTHT                      AS AC_MTHTACC ,
                        acc.ACC_MTTTC                     AS AC_MTTTCACC
                FROM
                        --fpa.fpaqtde     a  ,
                        fpalld.fpaqtctc b  ,
                        fpalld.fpaqtelt a,
                        fpalld.fpaqtacc acc,
                        FPADS_QTASSETS  ASS
                WHERE
                        a.REF_NO           = b.REF_NO
                AND     a.DER_ELEMENT      = 'O'
                AND     a.SERIE_NO        = acc.ACC_SERIE_NO
                AND     ASS.BI_VIN         = a.SERIE_NO
                AND     B.DATE_MAJ >= (SELECT SUC.DATE_DERNIER_SUCCES FROM FPADS.FPADS_QTSUC SUC);

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', '## ALIM_ACCESSOIRES ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPADS_QTACCESSOIRES
                                (
                                        AC_ID      ,
                                        AC_ID_BI   ,
                                        AC_CDTYPACC,
                                        AC_LBACC   ,
                                        AC_MTHTACC ,
                                        AC_MTTTCACC
                                )
                                VALUES
                                (
                                        FPAQS_DS_ACCESSOIRES_ID.NEXTVAL,
                                        REC.AC_ID_BI                   ,
                                        REC.AC_CDTYPACC                ,
                                        REC.AC_LBACC                   ,
                                        REC.AC_MTHTACC                 ,
                                        REC.AC_MTTTCACC
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPADS_QTACCESSOIRES
                        SET
                                AC_LBACC    = REC.AC_LBACC  ,
                                AC_MTHTACC  = REC.AC_MTHTACC,
                                AC_MTTTCACC = REC.AC_MTTTCACC
                        WHERE
                                AC_ID_BI    = REC.AC_ID_BI
                        AND     AC_CDTYPACC = REC.AC_CDTYPACC;
                        
                        N_UPD := N_UPD+1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.AC_ID_BI);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_ACCESSOIRES', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_ACCESSOIRES;

FUNCTION ALIM_LIFECYCLE (NOMLOG       VARCHAR2,
                           P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        M10.CODE_PAYS AS LFC_countryBranchCode,
                        M10.VEH_CODE_CONSTRUCTEUR||M10.VEH_TYPE_DES_MINES||M10.VEH_NUM_SERIE AS LFC_serialNumber,
                        CTC.FLAG_LEASECO                                                     AS LFC_isLeasco,
                        M70.INT_NUM_DEMANDE_DE_TRAVAUX                                       AS LFC_MAINTENANCE_REF,
                        M70.INT_CODE_CONCESSIONNAIRE                                         AS LFC_REPAIR_ID_CODE,
                        M70.INT_KM_RELEVE                                                    AS LFC_REGISTERED_KM,
                        M70.INT_DATE_INTERVENTION                                            AS LFC_CREATION_DATE_FILE,
                        M70.INT_DATE_INTERVENTION                                            AS LFC_CHARGE_DATE,
                        M10.VEH_NUMERO_CONTRAT                                               AS BACKOFFICE_CURRENT_EXT_REF,
                        P_DATE_TRAIT                                                         AS LAST_UPDATE_DATE
                FROM
                        FPADS.FPAQT_GIFP_CONTRAT_INT M70,
                        FPADS.FPAQT_GIFP_CONTRAT_VEH M10,
                        FPALLD.FPAQTCTC CTC
                WHERE
                        M10.VEH_NUMERO_CONTRAT = M70.INT_NUMERO_CONTRAT
                AND     CTC.REF_NO = M10.VEH_NUMERO_CONTRAT;

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_LIFECYCLE', '## ALIM_LIFECYCLE ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPAQT_QTASSET_LIFECYCLE
                                (
                                        LFC_COUNTRYBRANCHCODE,
                                        LFC_SERIALNUMBER,
                                        LFC_ISLEASCO,
                                        LFC_MAINTENANCE_REF,
                                        LFC_REPAIR_ID_CODE,
                                        LFC_REGISTERED_KM,
                                        LFC_CREATION_DATE_FILE,
                                        LFC_CHARGE_DATE,
                                        BACKOFFICE_CURRENT_EXT_REF,
                                        LAST_UPDATE_DATE,
                                        AS_ID
                                )
                                VALUES
                                (
                                        REC.LFC_COUNTRYBRANCHCODE,
                                        REC.LFC_SERIALNUMBER                   ,
                                        REC.LFC_ISLEASCO                ,
                                        REC.LFC_MAINTENANCE_REF                   ,
                                        REC.LFC_REPAIR_ID_CODE                 ,
                                        REC.LFC_REGISTERED_KM                ,
                                        REC.LFC_CREATION_DATE_FILE,
                                        REC.LFC_CHARGE_DATE,
                                        REC.BACKOFFICE_CURRENT_EXT_REF,
                                        REC.LAST_UPDATE_DATE,
                                        FPADS_QS_ASSET_LIFECYCLE_ID.NEXTVAL
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPAQT_QTASSET_LIFECYCLE
                        SET
                                LFC_SERIALNUMBER    = REC.LFC_SERIALNUMBER  ,
                                LFC_ISLEASCO  = REC.LFC_ISLEASCO,
                                LFC_REPAIR_ID_CODE = REC.LFC_REPAIR_ID_CODE,
                                LFC_REGISTERED_KM  = REC.LFC_REGISTERED_KM,
                                LFC_CREATION_DATE_FILE = REC.LFC_CREATION_DATE_FILE,
                                LFC_CHARGE_DATE        = REC.LFC_CHARGE_DATE,
                                LAST_UPDATE_DATE           = REC.LAST_UPDATE_DATE
                        WHERE
                                LFC_COUNTRYBRANCHCODE    = REC.LFC_COUNTRYBRANCHCODE
                        AND     LFC_MAINTENANCE_REF = REC.LFC_MAINTENANCE_REF
                        AND     BACKOFFICE_CURRENT_EXT_REF = REC.BACKOFFICE_CURRENT_EXT_REF;
                        
                        N_UPD := N_UPD+1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_LIFECYCLE', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.BACKOFFICE_CURRENT_EXT_REF);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_LIFECYCLE', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_LIFECYCLE', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_LIFECYCLE', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_LIFECYCLE', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_LIFECYCLE;

FUNCTION ALIM_CUSTOMER_BILLING (NOMLOG       VARCHAR2,
                           P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER :=0;
        N_SUP NUMBER :=0;
        file_id utl_file.file_type;
        res   NUMBER :=0;
        N_INS NUMBER := 0;
        N_UPD NUMBER := 0;
        CURSOR CUR IS
                SELECT
                        M30.NUM_FACTURE AS CUS_INVOICE_REF,
                        M30.CODE_FACTURE AS CUS_INVOICE_TYPE,
                        M02.DATE_EXIGIBILITE AS CUS_DUE_DATE,
                        M02.DATE_FACTURE     AS CUS_SITUATION_DATE,
                        TO_DATE(M30.CDP_DEBUT_PERIODE_FACTUREE, 'YYYYMMDD') AS CUS_START_PERIODE,
                        TO_DATE(M30.CDP_FIN_PERIODE_FACTUREE, 'YYYYMMDD')   AS CUS_END_PERIODE,
                        M02.TOTAL_GENERAL_FACTURE      AS CUS_AMOUNT_IT,
                        CTC.FLAG_LEASECO               AS IS_LEASECO,
                        M30.CODE_FACTURE               AS CUS_PAYMENT_TYPE_CODE,
                        M02.MODE_DE_REGLEMENT          AS CUS_PAYMENT_TYPE,
                        M01.ADR_NOM_CLIENT             AS CUS_ACCOUNT_HOLDER_NAME,
                        M01.NUM_CLIENT                 AS CUS_ACCOUNT_HOLDER_REF,
                        M30.CDP_LIBELLE_DU_PRODUIT     AS CUS_ITEM_LABEL,
                        CASE WHEN M30.CDP_CODE_SIGNE1 = '-' THEN -M30.CDP_MONTANT_HT_FACTURE ELSE M30.CDP_MONTANT_HT_FACTURE END AS CUS_ITEM_AMOUNT_ET,
                        CASE WHEN M30.CDP_CODE_SIGNE4 = '-' THEN -M30.CDP_MONTANT_TTC_FACTURE ELSE M30.CDP_MONTANT_TTC_FACTURE END AS CUS_ITEM_AMOUNT_IT,
                        CASE WHEN M30.CDP_CODE_SIGNE5 ='-' THEN -M30.CDP_MONTANT_TTC_TIERS_FACTURE ELSE CDP_MONTANT_TTC_TIERS_FACTURE END AS CUS_ITEM_AMOUNT_IT_THIRD_PARTY,
                        CASE WHEN M30.CDP_CODE_SIGNE2 ='-' THEN -M30.CDP_MONTANT_TVA_FACTUREE ELSE CDP_MONTANT_TVA_FACTUREE END AS CUS_ITEM_VAT_AMOUNT,
                        CASE WHEN M30.CDP_CODE_SIGNE3 ='-' THEN -M30.CDP_MONTANT_TVA_TIERS_FACTUREE ELSE CDP_MONTANT_TVA_TIERS_FACTUREE END AS CUS_ITEM_VAT_AMOUNT_THIRD_PARTY,
                        CTC.REF_NO AS BACKOFFICE_CURRENT_EXT_REF,
                        M30.NUM_SIREN AS CUS_NATIONAL_IDENTIFIER,
                        'FR_SIREN_CD' AS CUS_NATIONAL_IDENTIFIER_TYPE,
                        P_DATE_TRAIT                                                         AS LAST_UPDATE_DATE
                FROM
                        FPADS.FPAQT_GIFP_FACTURE_CDP M30,
                        FPADS.FPAQT_GIFP_FACTURE_GEN M02,
                        FPADS.FPAQT_GIFP_FACTURE_ADR M01,
                        FPALLD.FPAQTCTC CTC
                WHERE
                        M02.NUM_FACTURE = M01.NUM_FACTURE
                AND     M30.NUM_FACTURE = M01.NUM_FACTURE
                AND     M30.NUM_CONTRAT = CTC.REF_NO;

BEGIN
        file_id := FPA.FPAQAUT.F_OPEN(NOMLOG);
        res     := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CUSTOMER_BILLING', '## ALIM_CUSTOMER_BILLING ##');
        FOR REC IN CUR
        LOOP
                IF MOD(N_UPD + N_INS, 10000) = 0 THEN
                        COMMIT;
                END IF;
                BEGIN
                        INSERT INTO
                                FPAQT_QTCUSTOMER_BILLING
                                (
                                        CUS_INVOICE_REF,			
                                        CUS_INVOICE_TYPE,
                                        CUS_DUE_DATE,
                                        CUS_SITUATION_DATE,
                                        CUS_START_PERIODE,
                                        CUS_END_PERIODE,
                                        CUS_AMOUNT_IT,
                                        IS_LEASECO,
                                        CUS_PAYMENT_TYPE_CODE,
                                        CUS_PAYMENT_TYPE,
                                        CUS_ACCOUNT_HOLDER_NAME,
                                        CUS_ACCOUNT_HOLDER_REF,
                                        CUS_ITEM_LABEL,
                                        CUS_ITEM_AMOUNT_ET,
                                        CUS_ITEM_AMOUNT_IT,
                                        CUS_ITEM_AMOUNT_IT_THIRD_PARTY,
                                        CUS_ITEM_VAT_AMOUNT,
                                        CUS_ITEM_VAT_AMOUNT_THIRD_PARTY,
                                        BACKOFFICE_CURRENT_EXT_REF,
                                        CUS_NATIONAL_IDENTIFIER,
                                        CUS_NATIONAL_IDENTIFIER_TYPE,
                                        CUS_ID,
                                        LAST_UPDATE_DATE				

                                )
                                VALUES
                                (
                                        REC.CUS_INVOICE_REF,			
                                        REC.CUS_INVOICE_TYPE,
                                        REC.CUS_DUE_DATE,
                                        REC.CUS_SITUATION_DATE,
                                        REC.CUS_START_PERIODE,
                                        REC.CUS_END_PERIODE,
                                        REC.CUS_AMOUNT_IT,
                                        REC.IS_LEASECO,
                                        REC.CUS_PAYMENT_TYPE_CODE,
                                        REC.CUS_PAYMENT_TYPE,
                                        REC.CUS_ACCOUNT_HOLDER_NAME,
                                        REC.CUS_ACCOUNT_HOLDER_REF,
                                        REC.CUS_ITEM_LABEL,
                                        REC.CUS_ITEM_AMOUNT_ET,
                                        REC.CUS_ITEM_AMOUNT_IT,
                                        REC.CUS_ITEM_AMOUNT_IT_THIRD_PARTY,
                                        REC.CUS_ITEM_VAT_AMOUNT,
                                        REC.CUS_ITEM_VAT_AMOUNT_THIRD_PARTY,
                                        REC.BACKOFFICE_CURRENT_EXT_REF,
                                        REC.CUS_NATIONAL_IDENTIFIER,
                                        REC.CUS_NATIONAL_IDENTIFIER_TYPE,
                                        FPADS_QS_CUSTOMER_BILLING_ID.NEXTVAL,
                                        REC.LAST_UPDATE_DATE
                                );
                        
                        N_INS := N_INS+1;
                EXCEPTION
                WHEN DUP_VAL_ON_INDEX THEN
                        UPDATE
                                FPAQT_QTCUSTOMER_BILLING
                        SET
                                CUS_INVOICE_TYPE                   = REC.CUS_INVOICE_TYPE,
                                CUS_DUE_DATE                       = REC.CUS_DUE_DATE,
                                CUS_SITUATION_DATE                 = REC.CUS_SITUATION_DATE,
                                CUS_END_PERIODE                    = REC.CUS_END_PERIODE,
                                CUS_AMOUNT_IT                      = REC.CUS_AMOUNT_IT,
                                IS_LEASECO                         = REC.IS_LEASECO,
                                CUS_PAYMENT_TYPE_CODE              = REC.CUS_PAYMENT_TYPE_CODE,
                                CUS_PAYMENT_TYPE                   = REC.CUS_PAYMENT_TYPE,
                                CUS_ACCOUNT_HOLDER_NAME            = REC.CUS_ACCOUNT_HOLDER_NAME,
                                CUS_ACCOUNT_HOLDER_REF             = REC.CUS_ACCOUNT_HOLDER_REF,
                                CUS_ITEM_AMOUNT_ET                 = REC.CUS_ITEM_AMOUNT_ET,
                                CUS_ITEM_AMOUNT_IT                 = REC.CUS_ITEM_AMOUNT_IT,
                                CUS_ITEM_AMOUNT_IT_THIRD_PARTY     = REC.CUS_ITEM_AMOUNT_IT_THIRD_PARTY,
                                CUS_ITEM_VAT_AMOUNT                = REC.CUS_ITEM_VAT_AMOUNT,
                                CUS_ITEM_VAT_AMOUNT_THIRD_PARTY    = REC.CUS_ITEM_VAT_AMOUNT_THIRD_PARTY,
                                CUS_NATIONAL_IDENTIFIER            = REC.CUS_NATIONAL_IDENTIFIER,
                                CUS_NATIONAL_IDENTIFIER_TYPE       = REC.CUS_NATIONAL_IDENTIFIER_TYPE,
                                LAST_UPDATE_DATE                   = REC.LAST_UPDATE_DATE
                        WHERE
                                CUS_INVOICE_REF                    = REC.CUS_INVOICE_REF
                        AND     CUS_START_PERIODE                  = REC.CUS_START_PERIODE
                        AND     CUS_ITEM_LABEL                     = REC.CUS_ITEM_LABEL
                        AND     BACKOFFICE_CURRENT_EXT_REF         = REC.BACKOFFICE_CURRENT_EXT_REF;
                        
                        N_UPD := N_UPD+1;
                WHEN OTHERS THEN
                        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CUSTOMER_BILLING', 'Message Erreur pl/sql :'
                        ||sqlerrm
                        || '_'
                        || REC.BACKOFFICE_CURRENT_EXT_REF);
                        --EXIT;
                END;
        END LOOP;
        COMMIT;
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CUSTOMER_BILLING', 'Nombre d insertion :'
        ||N_INS);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CUSTOMER_BILLING', 'Nombre de mise a jour :'
        ||N_UPD);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
EXCEPTION
WHEN OTHERS THEN
        COMMIT;
        V_ERR := 1;
        res   := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CUSTOMER_BILLING', 'Message Erreur pl/sql :'
        ||sqlerrm);
        res := FPA.FPAQAUT.F_WRITE(file_id, 'ALIM_CUSTOMER_BILLING', 'Nombre de suppressions :'
        ||N_SUP);
        res := FPA.FPAQAUT.F_WRITE(file_id, '', '');
        UTL_FILE.FCLOSE(file_id);
        RETURN V_ERR;
END ALIM_CUSTOMER_BILLING;
/***************************************************************************/
FUNCTION MAIN_DS_FR (NOMLOG       VARCHAR2,
                     P_DATE_TRAIT DATE)
        RETURN NUMBER
IS
        V_ERR NUMBER:=0;
        V_RET NUMBER:=0;
BEGIN
        V_ERR := ALIM_CTR_EKIP(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_STRUCTURE_EKIP(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_PAYMEANS_EKIP(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_SERVICE_EKIP(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_STAKEHOLDERS_EKIP(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_CTR_MILES(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_STRUCTURE_MILES(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_SERVICE_MILES(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_PAYMEANS_MILES(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_STAKEHOLDERS_MILES(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_ASSETS(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_AMOUNTS(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_OPTIONS(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        V_ERR := ALIM_ACCESSOIRES(NOMLOG, P_DATE_TRAIT);
        IF V_ERR=1 THEN
                V_RET:=1;
                RETURN V_RET;
        END IF;
        
        UPDATE FPADS.FPADS_QTSUC SET DATE_DERNIER_SUCCES = P_DATE_TRAIT;
        COMMIT;
        
        RETURN V_RET;

END MAIN_DS_FR;
/***************************************************************************/
/***************************************************************************/
END FPAQADS_FR;
